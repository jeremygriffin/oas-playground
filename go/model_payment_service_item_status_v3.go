/*
MilMove Prime V3 API

The Prime V3 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v3/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PaymentServiceItemStatusV3 the model 'PaymentServiceItemStatusV3'
type PaymentServiceItemStatusV3 string

// List of PaymentServiceItemStatus
const (
	REQUESTED PaymentServiceItemStatusV3 = "REQUESTED"
	APPROVED PaymentServiceItemStatusV3 = "APPROVED"
	DENIED PaymentServiceItemStatusV3 = "DENIED"
	SENT_TO_GEX PaymentServiceItemStatusV3 = "SENT_TO_GEX"
	PAID PaymentServiceItemStatusV3 = "PAID"
	EDI_ERROR PaymentServiceItemStatusV3 = "EDI_ERROR"
)

// All allowed values of PaymentServiceItemStatusV3 enum
var AllowedPaymentServiceItemStatusV3EnumValues = []PaymentServiceItemStatusV3{
	"REQUESTED",
	"APPROVED",
	"DENIED",
	"SENT_TO_GEX",
	"PAID",
	"EDI_ERROR",
}

func (v *PaymentServiceItemStatusV3) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentServiceItemStatusV3(value)
	for _, existing := range AllowedPaymentServiceItemStatusV3EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentServiceItemStatusV3", value)
}

// NewPaymentServiceItemStatusV3FromValue returns a pointer to a valid PaymentServiceItemStatusV3
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentServiceItemStatusV3FromValue(v string) (*PaymentServiceItemStatusV3, error) {
	ev := PaymentServiceItemStatusV3(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentServiceItemStatusV3: valid values are %v", v, AllowedPaymentServiceItemStatusV3EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentServiceItemStatusV3) IsValid() bool {
	for _, existing := range AllowedPaymentServiceItemStatusV3EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentServiceItemStatus value
func (v PaymentServiceItemStatusV3) Ptr() *PaymentServiceItemStatusV3 {
	return &v
}

type NullablePaymentServiceItemStatusV3 struct {
	value *PaymentServiceItemStatusV3
	isSet bool
}

func (v NullablePaymentServiceItemStatusV3) Get() *PaymentServiceItemStatusV3 {
	return v.value
}

func (v *NullablePaymentServiceItemStatusV3) Set(val *PaymentServiceItemStatusV3) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentServiceItemStatusV3) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentServiceItemStatusV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentServiceItemStatusV3(val *PaymentServiceItemStatusV3) *NullablePaymentServiceItemStatusV3 {
	return &NullablePaymentServiceItemStatusV3{value: val, isSet: true}
}

func (v NullablePaymentServiceItemStatusV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentServiceItemStatusV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

