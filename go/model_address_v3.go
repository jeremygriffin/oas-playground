/*
MilMove Prime V3 API

The Prime V3 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v3/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddressV3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressV3{}

// AddressV3 A postal address
type AddressV3 struct {
	Id *string `json:"id,omitempty"`
	StreetAddress1 string `json:"streetAddress1"`
	StreetAddress2 NullableString `json:"streetAddress2,omitempty"`
	StreetAddress3 NullableString `json:"streetAddress3,omitempty"`
	City string `json:"city"`
	ETag *string `json:"eTag,omitempty"`
	State string `json:"state"`
	PostalCode string `json:"postalCode" validate:"regexp=^(\\\\d{5}([\\\\-]\\\\d{4})?)$"`
	Country NullableString `json:"country,omitempty"`
	County NullableString `json:"county,omitempty"`
}

type _AddressV3 AddressV3

// NewAddressV3 instantiates a new AddressV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressV3(streetAddress1 string, city string, state string, postalCode string) *AddressV3 {
	this := AddressV3{}
	this.StreetAddress1 = streetAddress1
	this.City = city
	this.State = state
	this.PostalCode = postalCode
	var country string = "USA"
	this.Country = *NewNullableString(&country)
	return &this
}

// NewAddressV3WithDefaults instantiates a new AddressV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressV3WithDefaults() *AddressV3 {
	this := AddressV3{}
	var country string = "USA"
	this.Country = *NewNullableString(&country)
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddressV3) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressV3) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AddressV3) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AddressV3) SetId(v string) {
	o.Id = &v
}

// GetStreetAddress1 returns the StreetAddress1 field value
func (o *AddressV3) GetStreetAddress1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreetAddress1
}

// GetStreetAddress1Ok returns a tuple with the StreetAddress1 field value
// and a boolean to check if the value has been set.
func (o *AddressV3) GetStreetAddress1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreetAddress1, true
}

// SetStreetAddress1 sets field value
func (o *AddressV3) SetStreetAddress1(v string) {
	o.StreetAddress1 = v
}

// GetStreetAddress2 returns the StreetAddress2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddressV3) GetStreetAddress2() string {
	if o == nil || IsNil(o.StreetAddress2.Get()) {
		var ret string
		return ret
	}
	return *o.StreetAddress2.Get()
}

// GetStreetAddress2Ok returns a tuple with the StreetAddress2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddressV3) GetStreetAddress2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreetAddress2.Get(), o.StreetAddress2.IsSet()
}

// HasStreetAddress2 returns a boolean if a field has been set.
func (o *AddressV3) HasStreetAddress2() bool {
	if o != nil && o.StreetAddress2.IsSet() {
		return true
	}

	return false
}

// SetStreetAddress2 gets a reference to the given NullableString and assigns it to the StreetAddress2 field.
func (o *AddressV3) SetStreetAddress2(v string) {
	o.StreetAddress2.Set(&v)
}
// SetStreetAddress2Nil sets the value for StreetAddress2 to be an explicit nil
func (o *AddressV3) SetStreetAddress2Nil() {
	o.StreetAddress2.Set(nil)
}

// UnsetStreetAddress2 ensures that no value is present for StreetAddress2, not even an explicit nil
func (o *AddressV3) UnsetStreetAddress2() {
	o.StreetAddress2.Unset()
}

// GetStreetAddress3 returns the StreetAddress3 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddressV3) GetStreetAddress3() string {
	if o == nil || IsNil(o.StreetAddress3.Get()) {
		var ret string
		return ret
	}
	return *o.StreetAddress3.Get()
}

// GetStreetAddress3Ok returns a tuple with the StreetAddress3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddressV3) GetStreetAddress3Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreetAddress3.Get(), o.StreetAddress3.IsSet()
}

// HasStreetAddress3 returns a boolean if a field has been set.
func (o *AddressV3) HasStreetAddress3() bool {
	if o != nil && o.StreetAddress3.IsSet() {
		return true
	}

	return false
}

// SetStreetAddress3 gets a reference to the given NullableString and assigns it to the StreetAddress3 field.
func (o *AddressV3) SetStreetAddress3(v string) {
	o.StreetAddress3.Set(&v)
}
// SetStreetAddress3Nil sets the value for StreetAddress3 to be an explicit nil
func (o *AddressV3) SetStreetAddress3Nil() {
	o.StreetAddress3.Set(nil)
}

// UnsetStreetAddress3 ensures that no value is present for StreetAddress3, not even an explicit nil
func (o *AddressV3) UnsetStreetAddress3() {
	o.StreetAddress3.Unset()
}

// GetCity returns the City field value
func (o *AddressV3) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *AddressV3) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *AddressV3) SetCity(v string) {
	o.City = v
}

// GetETag returns the ETag field value if set, zero value otherwise.
func (o *AddressV3) GetETag() string {
	if o == nil || IsNil(o.ETag) {
		var ret string
		return ret
	}
	return *o.ETag
}

// GetETagOk returns a tuple with the ETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressV3) GetETagOk() (*string, bool) {
	if o == nil || IsNil(o.ETag) {
		return nil, false
	}
	return o.ETag, true
}

// HasETag returns a boolean if a field has been set.
func (o *AddressV3) HasETag() bool {
	if o != nil && !IsNil(o.ETag) {
		return true
	}

	return false
}

// SetETag gets a reference to the given string and assigns it to the ETag field.
func (o *AddressV3) SetETag(v string) {
	o.ETag = &v
}

// GetState returns the State field value
func (o *AddressV3) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *AddressV3) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *AddressV3) SetState(v string) {
	o.State = v
}

// GetPostalCode returns the PostalCode field value
func (o *AddressV3) GetPostalCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value
// and a boolean to check if the value has been set.
func (o *AddressV3) GetPostalCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostalCode, true
}

// SetPostalCode sets field value
func (o *AddressV3) SetPostalCode(v string) {
	o.PostalCode = v
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddressV3) GetCountry() string {
	if o == nil || IsNil(o.Country.Get()) {
		var ret string
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddressV3) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *AddressV3) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableString and assigns it to the Country field.
func (o *AddressV3) SetCountry(v string) {
	o.Country.Set(&v)
}
// SetCountryNil sets the value for Country to be an explicit nil
func (o *AddressV3) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *AddressV3) UnsetCountry() {
	o.Country.Unset()
}

// GetCounty returns the County field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddressV3) GetCounty() string {
	if o == nil || IsNil(o.County.Get()) {
		var ret string
		return ret
	}
	return *o.County.Get()
}

// GetCountyOk returns a tuple with the County field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddressV3) GetCountyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.County.Get(), o.County.IsSet()
}

// HasCounty returns a boolean if a field has been set.
func (o *AddressV3) HasCounty() bool {
	if o != nil && o.County.IsSet() {
		return true
	}

	return false
}

// SetCounty gets a reference to the given NullableString and assigns it to the County field.
func (o *AddressV3) SetCounty(v string) {
	o.County.Set(&v)
}
// SetCountyNil sets the value for County to be an explicit nil
func (o *AddressV3) SetCountyNil() {
	o.County.Set(nil)
}

// UnsetCounty ensures that no value is present for County, not even an explicit nil
func (o *AddressV3) UnsetCounty() {
	o.County.Unset()
}

func (o AddressV3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressV3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["streetAddress1"] = o.StreetAddress1
	if o.StreetAddress2.IsSet() {
		toSerialize["streetAddress2"] = o.StreetAddress2.Get()
	}
	if o.StreetAddress3.IsSet() {
		toSerialize["streetAddress3"] = o.StreetAddress3.Get()
	}
	toSerialize["city"] = o.City
	if !IsNil(o.ETag) {
		toSerialize["eTag"] = o.ETag
	}
	toSerialize["state"] = o.State
	toSerialize["postalCode"] = o.PostalCode
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	if o.County.IsSet() {
		toSerialize["county"] = o.County.Get()
	}
	return toSerialize, nil
}

func (o *AddressV3) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"streetAddress1",
		"city",
		"state",
		"postalCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressV3 := _AddressV3{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressV3)

	if err != nil {
		return err
	}

	*o = AddressV3(varAddressV3)

	return err
}

type NullableAddressV3 struct {
	value *AddressV3
	isSet bool
}

func (v NullableAddressV3) Get() *AddressV3 {
	return v.value
}

func (v *NullableAddressV3) Set(val *AddressV3) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressV3) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressV3(val *AddressV3) *NullableAddressV3 {
	return &NullableAddressV3{value: val, isSet: true}
}

func (v NullableAddressV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


