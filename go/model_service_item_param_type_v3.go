/*
MilMove Prime V3 API

The Prime V3 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v3/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ServiceItemParamTypeV3 the model 'ServiceItemParamTypeV3'
type ServiceItemParamTypeV3 string

// List of ServiceItemParamType
const (
	STRING ServiceItemParamTypeV3 = "STRING"
	DATE ServiceItemParamTypeV3 = "DATE"
	INTEGER ServiceItemParamTypeV3 = "INTEGER"
	DECIMAL ServiceItemParamTypeV3 = "DECIMAL"
	TIMESTAMP ServiceItemParamTypeV3 = "TIMESTAMP"
	PAYMENT_SERVICE_ITEM_UUID ServiceItemParamTypeV3 = "PaymentServiceItemUUID"
	BOOLEAN ServiceItemParamTypeV3 = "BOOLEAN"
)

// All allowed values of ServiceItemParamTypeV3 enum
var AllowedServiceItemParamTypeV3EnumValues = []ServiceItemParamTypeV3{
	"STRING",
	"DATE",
	"INTEGER",
	"DECIMAL",
	"TIMESTAMP",
	"PaymentServiceItemUUID",
	"BOOLEAN",
}

func (v *ServiceItemParamTypeV3) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceItemParamTypeV3(value)
	for _, existing := range AllowedServiceItemParamTypeV3EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceItemParamTypeV3", value)
}

// NewServiceItemParamTypeV3FromValue returns a pointer to a valid ServiceItemParamTypeV3
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceItemParamTypeV3FromValue(v string) (*ServiceItemParamTypeV3, error) {
	ev := ServiceItemParamTypeV3(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceItemParamTypeV3: valid values are %v", v, AllowedServiceItemParamTypeV3EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceItemParamTypeV3) IsValid() bool {
	for _, existing := range AllowedServiceItemParamTypeV3EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceItemParamType value
func (v ServiceItemParamTypeV3) Ptr() *ServiceItemParamTypeV3 {
	return &v
}

type NullableServiceItemParamTypeV3 struct {
	value *ServiceItemParamTypeV3
	isSet bool
}

func (v NullableServiceItemParamTypeV3) Get() *ServiceItemParamTypeV3 {
	return v.value
}

func (v *NullableServiceItemParamTypeV3) Set(val *ServiceItemParamTypeV3) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceItemParamTypeV3) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceItemParamTypeV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceItemParamTypeV3(val *ServiceItemParamTypeV3) *NullableServiceItemParamTypeV3 {
	return &NullableServiceItemParamTypeV3{value: val, isSet: true}
}

func (v NullableServiceItemParamTypeV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceItemParamTypeV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

