/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrdersType the model 'OrdersType'
type OrdersType string

// List of OrdersType
const (
	PERMANENT_CHANGE_OF_STATION OrdersType = "PERMANENT_CHANGE_OF_STATION"
	LOCAL_MOVE OrdersType = "LOCAL_MOVE"
	RETIREMENT OrdersType = "RETIREMENT"
	SEPARATION OrdersType = "SEPARATION"
	WOUNDED_WARRIOR OrdersType = "WOUNDED_WARRIOR"
	BLUEBARK OrdersType = "BLUEBARK"
	SAFETY OrdersType = "SAFETY"
)

// All allowed values of OrdersType enum
var AllowedOrdersTypeEnumValues = []OrdersType{
	"PERMANENT_CHANGE_OF_STATION",
	"LOCAL_MOVE",
	"RETIREMENT",
	"SEPARATION",
	"WOUNDED_WARRIOR",
	"BLUEBARK",
	"SAFETY",
}

func (v *OrdersType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrdersType(value)
	for _, existing := range AllowedOrdersTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrdersType", value)
}

// NewOrdersTypeFromValue returns a pointer to a valid OrdersType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrdersTypeFromValue(v string) (*OrdersType, error) {
	ev := OrdersType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrdersType: valid values are %v", v, AllowedOrdersTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrdersType) IsValid() bool {
	for _, existing := range AllowedOrdersTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrdersType value
func (v OrdersType) Ptr() *OrdersType {
	return &v
}

type NullableOrdersType struct {
	value *OrdersType
	isSet bool
}

func (v NullableOrdersType) Get() *OrdersType {
	return v.value
}

func (v *NullableOrdersType) Set(val *OrdersType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersType(val *OrdersType) *NullableOrdersType {
	return &NullableOrdersType{value: val, isSet: true}
}

func (v NullableOrdersType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

