/*
MilMove Prime V2 API

The Prime V2 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v2/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CustomerV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerV2{}

// CustomerV2 struct for CustomerV2
type CustomerV2 struct {
	Id *string `json:"id,omitempty"`
	DodID *string `json:"dodID,omitempty"`
	Emplid *string `json:"emplid,omitempty"`
	UserID *string `json:"userID,omitempty"`
	CurrentAddress *AddressV2V2 `json:"currentAddress,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName *string `json:"lastName,omitempty"`
	Branch *string `json:"branch,omitempty"`
	Phone *string `json:"phone,omitempty"`
	Email *string `json:"email,omitempty" validate:"regexp=^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$"`
	ETag *string `json:"eTag,omitempty"`
}

// NewCustomerV2 instantiates a new CustomerV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerV2() *CustomerV2 {
	this := CustomerV2{}
	return &this
}

// NewCustomerV2WithDefaults instantiates a new CustomerV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerV2WithDefaults() *CustomerV2 {
	this := CustomerV2{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustomerV2) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerV2) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustomerV2) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustomerV2) SetId(v string) {
	o.Id = &v
}

// GetDodID returns the DodID field value if set, zero value otherwise.
func (o *CustomerV2) GetDodID() string {
	if o == nil || IsNil(o.DodID) {
		var ret string
		return ret
	}
	return *o.DodID
}

// GetDodIDOk returns a tuple with the DodID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerV2) GetDodIDOk() (*string, bool) {
	if o == nil || IsNil(o.DodID) {
		return nil, false
	}
	return o.DodID, true
}

// HasDodID returns a boolean if a field has been set.
func (o *CustomerV2) HasDodID() bool {
	if o != nil && !IsNil(o.DodID) {
		return true
	}

	return false
}

// SetDodID gets a reference to the given string and assigns it to the DodID field.
func (o *CustomerV2) SetDodID(v string) {
	o.DodID = &v
}

// GetEmplid returns the Emplid field value if set, zero value otherwise.
func (o *CustomerV2) GetEmplid() string {
	if o == nil || IsNil(o.Emplid) {
		var ret string
		return ret
	}
	return *o.Emplid
}

// GetEmplidOk returns a tuple with the Emplid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerV2) GetEmplidOk() (*string, bool) {
	if o == nil || IsNil(o.Emplid) {
		return nil, false
	}
	return o.Emplid, true
}

// HasEmplid returns a boolean if a field has been set.
func (o *CustomerV2) HasEmplid() bool {
	if o != nil && !IsNil(o.Emplid) {
		return true
	}

	return false
}

// SetEmplid gets a reference to the given string and assigns it to the Emplid field.
func (o *CustomerV2) SetEmplid(v string) {
	o.Emplid = &v
}

// GetUserID returns the UserID field value if set, zero value otherwise.
func (o *CustomerV2) GetUserID() string {
	if o == nil || IsNil(o.UserID) {
		var ret string
		return ret
	}
	return *o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerV2) GetUserIDOk() (*string, bool) {
	if o == nil || IsNil(o.UserID) {
		return nil, false
	}
	return o.UserID, true
}

// HasUserID returns a boolean if a field has been set.
func (o *CustomerV2) HasUserID() bool {
	if o != nil && !IsNil(o.UserID) {
		return true
	}

	return false
}

// SetUserID gets a reference to the given string and assigns it to the UserID field.
func (o *CustomerV2) SetUserID(v string) {
	o.UserID = &v
}

// GetCurrentAddress returns the CurrentAddress field value if set, zero value otherwise.
func (o *CustomerV2) GetCurrentAddress() AddressV2V2 {
	if o == nil || IsNil(o.CurrentAddress) {
		var ret AddressV2V2
		return ret
	}
	return *o.CurrentAddress
}

// GetCurrentAddressOk returns a tuple with the CurrentAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerV2) GetCurrentAddressOk() (*AddressV2V2, bool) {
	if o == nil || IsNil(o.CurrentAddress) {
		return nil, false
	}
	return o.CurrentAddress, true
}

// HasCurrentAddress returns a boolean if a field has been set.
func (o *CustomerV2) HasCurrentAddress() bool {
	if o != nil && !IsNil(o.CurrentAddress) {
		return true
	}

	return false
}

// SetCurrentAddress gets a reference to the given AddressV2V2 and assigns it to the CurrentAddress field.
func (o *CustomerV2) SetCurrentAddress(v AddressV2V2) {
	o.CurrentAddress = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *CustomerV2) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerV2) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *CustomerV2) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *CustomerV2) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *CustomerV2) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerV2) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *CustomerV2) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *CustomerV2) SetLastName(v string) {
	o.LastName = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *CustomerV2) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerV2) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *CustomerV2) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *CustomerV2) SetBranch(v string) {
	o.Branch = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *CustomerV2) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerV2) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *CustomerV2) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *CustomerV2) SetPhone(v string) {
	o.Phone = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CustomerV2) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerV2) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CustomerV2) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CustomerV2) SetEmail(v string) {
	o.Email = &v
}

// GetETag returns the ETag field value if set, zero value otherwise.
func (o *CustomerV2) GetETag() string {
	if o == nil || IsNil(o.ETag) {
		var ret string
		return ret
	}
	return *o.ETag
}

// GetETagOk returns a tuple with the ETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerV2) GetETagOk() (*string, bool) {
	if o == nil || IsNil(o.ETag) {
		return nil, false
	}
	return o.ETag, true
}

// HasETag returns a boolean if a field has been set.
func (o *CustomerV2) HasETag() bool {
	if o != nil && !IsNil(o.ETag) {
		return true
	}

	return false
}

// SetETag gets a reference to the given string and assigns it to the ETag field.
func (o *CustomerV2) SetETag(v string) {
	o.ETag = &v
}

func (o CustomerV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DodID) {
		toSerialize["dodID"] = o.DodID
	}
	if !IsNil(o.Emplid) {
		toSerialize["emplid"] = o.Emplid
	}
	if !IsNil(o.UserID) {
		toSerialize["userID"] = o.UserID
	}
	if !IsNil(o.CurrentAddress) {
		toSerialize["currentAddress"] = o.CurrentAddress
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.ETag) {
		toSerialize["eTag"] = o.ETag
	}
	return toSerialize, nil
}

type NullableCustomerV2 struct {
	value *CustomerV2
	isSet bool
}

func (v NullableCustomerV2) Get() *CustomerV2 {
	return v.value
}

func (v *NullableCustomerV2) Set(val *CustomerV2) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerV2) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerV2(val *CustomerV2) *NullableCustomerV2 {
	return &NullableCustomerV2{value: val, isSet: true}
}

func (v NullableCustomerV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


