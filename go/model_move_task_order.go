/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the MoveTaskOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoveTaskOrder{}

// MoveTaskOrder struct for MoveTaskOrder
type MoveTaskOrder struct {
	Id *string `json:"id,omitempty"`
	MoveCode *string `json:"moveCode,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	OrderID *string `json:"orderID,omitempty"`
	Order *Order `json:"order,omitempty"`
	ReferenceId *string `json:"referenceId,omitempty"`
	AvailableToPrimeAt NullableTime `json:"availableToPrimeAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	PrimeCounselingCompletedAt NullableTime `json:"primeCounselingCompletedAt,omitempty"`
	PaymentRequests []PaymentRequest `json:"paymentRequests"`
	MtoServiceItems []MTOServiceItem `json:"mtoServiceItems"`
	// A list of shipments without their associated service items.
	MtoShipments []MTOShipmentWithoutServiceItems `json:"mtoShipments"`
	PpmType *string `json:"ppmType,omitempty"`
	PpmEstimatedWeight *int32 `json:"ppmEstimatedWeight,omitempty"`
	ExcessWeightQualifiedAt NullableTime `json:"excessWeightQualifiedAt,omitempty"`
	ExcessWeightAcknowledgedAt NullableTime `json:"excessWeightAcknowledgedAt,omitempty"`
	ExcessWeightUploadId NullableString `json:"excessWeightUploadId,omitempty"`
	ETag *string `json:"eTag,omitempty"`
}

type _MoveTaskOrder MoveTaskOrder

// NewMoveTaskOrder instantiates a new MoveTaskOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveTaskOrder(paymentRequests []PaymentRequest, mtoServiceItems []MTOServiceItem, mtoShipments []MTOShipmentWithoutServiceItems) *MoveTaskOrder {
	this := MoveTaskOrder{}
	this.PaymentRequests = paymentRequests
	this.MtoServiceItems = mtoServiceItems
	this.MtoShipments = mtoShipments
	return &this
}

// NewMoveTaskOrderWithDefaults instantiates a new MoveTaskOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveTaskOrderWithDefaults() *MoveTaskOrder {
	this := MoveTaskOrder{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MoveTaskOrder) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskOrder) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MoveTaskOrder) SetId(v string) {
	o.Id = &v
}

// GetMoveCode returns the MoveCode field value if set, zero value otherwise.
func (o *MoveTaskOrder) GetMoveCode() string {
	if o == nil || IsNil(o.MoveCode) {
		var ret string
		return ret
	}
	return *o.MoveCode
}

// GetMoveCodeOk returns a tuple with the MoveCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskOrder) GetMoveCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MoveCode) {
		return nil, false
	}
	return o.MoveCode, true
}

// HasMoveCode returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasMoveCode() bool {
	if o != nil && !IsNil(o.MoveCode) {
		return true
	}

	return false
}

// SetMoveCode gets a reference to the given string and assigns it to the MoveCode field.
func (o *MoveTaskOrder) SetMoveCode(v string) {
	o.MoveCode = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *MoveTaskOrder) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskOrder) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *MoveTaskOrder) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetOrderID returns the OrderID field value if set, zero value otherwise.
func (o *MoveTaskOrder) GetOrderID() string {
	if o == nil || IsNil(o.OrderID) {
		var ret string
		return ret
	}
	return *o.OrderID
}

// GetOrderIDOk returns a tuple with the OrderID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskOrder) GetOrderIDOk() (*string, bool) {
	if o == nil || IsNil(o.OrderID) {
		return nil, false
	}
	return o.OrderID, true
}

// HasOrderID returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasOrderID() bool {
	if o != nil && !IsNil(o.OrderID) {
		return true
	}

	return false
}

// SetOrderID gets a reference to the given string and assigns it to the OrderID field.
func (o *MoveTaskOrder) SetOrderID(v string) {
	o.OrderID = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *MoveTaskOrder) GetOrder() Order {
	if o == nil || IsNil(o.Order) {
		var ret Order
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskOrder) GetOrderOk() (*Order, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given Order and assigns it to the Order field.
func (o *MoveTaskOrder) SetOrder(v Order) {
	o.Order = &v
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *MoveTaskOrder) GetReferenceId() string {
	if o == nil || IsNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskOrder) GetReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasReferenceId() bool {
	if o != nil && !IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *MoveTaskOrder) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetAvailableToPrimeAt returns the AvailableToPrimeAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MoveTaskOrder) GetAvailableToPrimeAt() time.Time {
	if o == nil || IsNil(o.AvailableToPrimeAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.AvailableToPrimeAt.Get()
}

// GetAvailableToPrimeAtOk returns a tuple with the AvailableToPrimeAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MoveTaskOrder) GetAvailableToPrimeAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailableToPrimeAt.Get(), o.AvailableToPrimeAt.IsSet()
}

// HasAvailableToPrimeAt returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasAvailableToPrimeAt() bool {
	if o != nil && o.AvailableToPrimeAt.IsSet() {
		return true
	}

	return false
}

// SetAvailableToPrimeAt gets a reference to the given NullableTime and assigns it to the AvailableToPrimeAt field.
func (o *MoveTaskOrder) SetAvailableToPrimeAt(v time.Time) {
	o.AvailableToPrimeAt.Set(&v)
}
// SetAvailableToPrimeAtNil sets the value for AvailableToPrimeAt to be an explicit nil
func (o *MoveTaskOrder) SetAvailableToPrimeAtNil() {
	o.AvailableToPrimeAt.Set(nil)
}

// UnsetAvailableToPrimeAt ensures that no value is present for AvailableToPrimeAt, not even an explicit nil
func (o *MoveTaskOrder) UnsetAvailableToPrimeAt() {
	o.AvailableToPrimeAt.Unset()
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *MoveTaskOrder) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskOrder) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *MoveTaskOrder) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetPrimeCounselingCompletedAt returns the PrimeCounselingCompletedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MoveTaskOrder) GetPrimeCounselingCompletedAt() time.Time {
	if o == nil || IsNil(o.PrimeCounselingCompletedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.PrimeCounselingCompletedAt.Get()
}

// GetPrimeCounselingCompletedAtOk returns a tuple with the PrimeCounselingCompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MoveTaskOrder) GetPrimeCounselingCompletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimeCounselingCompletedAt.Get(), o.PrimeCounselingCompletedAt.IsSet()
}

// HasPrimeCounselingCompletedAt returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasPrimeCounselingCompletedAt() bool {
	if o != nil && o.PrimeCounselingCompletedAt.IsSet() {
		return true
	}

	return false
}

// SetPrimeCounselingCompletedAt gets a reference to the given NullableTime and assigns it to the PrimeCounselingCompletedAt field.
func (o *MoveTaskOrder) SetPrimeCounselingCompletedAt(v time.Time) {
	o.PrimeCounselingCompletedAt.Set(&v)
}
// SetPrimeCounselingCompletedAtNil sets the value for PrimeCounselingCompletedAt to be an explicit nil
func (o *MoveTaskOrder) SetPrimeCounselingCompletedAtNil() {
	o.PrimeCounselingCompletedAt.Set(nil)
}

// UnsetPrimeCounselingCompletedAt ensures that no value is present for PrimeCounselingCompletedAt, not even an explicit nil
func (o *MoveTaskOrder) UnsetPrimeCounselingCompletedAt() {
	o.PrimeCounselingCompletedAt.Unset()
}

// GetPaymentRequests returns the PaymentRequests field value
func (o *MoveTaskOrder) GetPaymentRequests() []PaymentRequest {
	if o == nil {
		var ret []PaymentRequest
		return ret
	}

	return o.PaymentRequests
}

// GetPaymentRequestsOk returns a tuple with the PaymentRequests field value
// and a boolean to check if the value has been set.
func (o *MoveTaskOrder) GetPaymentRequestsOk() ([]PaymentRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentRequests, true
}

// SetPaymentRequests sets field value
func (o *MoveTaskOrder) SetPaymentRequests(v []PaymentRequest) {
	o.PaymentRequests = v
}

// GetMtoServiceItems returns the MtoServiceItems field value
func (o *MoveTaskOrder) GetMtoServiceItems() []MTOServiceItem {
	if o == nil {
		var ret []MTOServiceItem
		return ret
	}

	return o.MtoServiceItems
}

// GetMtoServiceItemsOk returns a tuple with the MtoServiceItems field value
// and a boolean to check if the value has been set.
func (o *MoveTaskOrder) GetMtoServiceItemsOk() ([]MTOServiceItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.MtoServiceItems, true
}

// SetMtoServiceItems sets field value
func (o *MoveTaskOrder) SetMtoServiceItems(v []MTOServiceItem) {
	o.MtoServiceItems = v
}

// GetMtoShipments returns the MtoShipments field value
func (o *MoveTaskOrder) GetMtoShipments() []MTOShipmentWithoutServiceItems {
	if o == nil {
		var ret []MTOShipmentWithoutServiceItems
		return ret
	}

	return o.MtoShipments
}

// GetMtoShipmentsOk returns a tuple with the MtoShipments field value
// and a boolean to check if the value has been set.
func (o *MoveTaskOrder) GetMtoShipmentsOk() ([]MTOShipmentWithoutServiceItems, bool) {
	if o == nil {
		return nil, false
	}
	return o.MtoShipments, true
}

// SetMtoShipments sets field value
func (o *MoveTaskOrder) SetMtoShipments(v []MTOShipmentWithoutServiceItems) {
	o.MtoShipments = v
}

// GetPpmType returns the PpmType field value if set, zero value otherwise.
func (o *MoveTaskOrder) GetPpmType() string {
	if o == nil || IsNil(o.PpmType) {
		var ret string
		return ret
	}
	return *o.PpmType
}

// GetPpmTypeOk returns a tuple with the PpmType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskOrder) GetPpmTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PpmType) {
		return nil, false
	}
	return o.PpmType, true
}

// HasPpmType returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasPpmType() bool {
	if o != nil && !IsNil(o.PpmType) {
		return true
	}

	return false
}

// SetPpmType gets a reference to the given string and assigns it to the PpmType field.
func (o *MoveTaskOrder) SetPpmType(v string) {
	o.PpmType = &v
}

// GetPpmEstimatedWeight returns the PpmEstimatedWeight field value if set, zero value otherwise.
func (o *MoveTaskOrder) GetPpmEstimatedWeight() int32 {
	if o == nil || IsNil(o.PpmEstimatedWeight) {
		var ret int32
		return ret
	}
	return *o.PpmEstimatedWeight
}

// GetPpmEstimatedWeightOk returns a tuple with the PpmEstimatedWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskOrder) GetPpmEstimatedWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.PpmEstimatedWeight) {
		return nil, false
	}
	return o.PpmEstimatedWeight, true
}

// HasPpmEstimatedWeight returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasPpmEstimatedWeight() bool {
	if o != nil && !IsNil(o.PpmEstimatedWeight) {
		return true
	}

	return false
}

// SetPpmEstimatedWeight gets a reference to the given int32 and assigns it to the PpmEstimatedWeight field.
func (o *MoveTaskOrder) SetPpmEstimatedWeight(v int32) {
	o.PpmEstimatedWeight = &v
}

// GetExcessWeightQualifiedAt returns the ExcessWeightQualifiedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MoveTaskOrder) GetExcessWeightQualifiedAt() time.Time {
	if o == nil || IsNil(o.ExcessWeightQualifiedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExcessWeightQualifiedAt.Get()
}

// GetExcessWeightQualifiedAtOk returns a tuple with the ExcessWeightQualifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MoveTaskOrder) GetExcessWeightQualifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcessWeightQualifiedAt.Get(), o.ExcessWeightQualifiedAt.IsSet()
}

// HasExcessWeightQualifiedAt returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasExcessWeightQualifiedAt() bool {
	if o != nil && o.ExcessWeightQualifiedAt.IsSet() {
		return true
	}

	return false
}

// SetExcessWeightQualifiedAt gets a reference to the given NullableTime and assigns it to the ExcessWeightQualifiedAt field.
func (o *MoveTaskOrder) SetExcessWeightQualifiedAt(v time.Time) {
	o.ExcessWeightQualifiedAt.Set(&v)
}
// SetExcessWeightQualifiedAtNil sets the value for ExcessWeightQualifiedAt to be an explicit nil
func (o *MoveTaskOrder) SetExcessWeightQualifiedAtNil() {
	o.ExcessWeightQualifiedAt.Set(nil)
}

// UnsetExcessWeightQualifiedAt ensures that no value is present for ExcessWeightQualifiedAt, not even an explicit nil
func (o *MoveTaskOrder) UnsetExcessWeightQualifiedAt() {
	o.ExcessWeightQualifiedAt.Unset()
}

// GetExcessWeightAcknowledgedAt returns the ExcessWeightAcknowledgedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MoveTaskOrder) GetExcessWeightAcknowledgedAt() time.Time {
	if o == nil || IsNil(o.ExcessWeightAcknowledgedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExcessWeightAcknowledgedAt.Get()
}

// GetExcessWeightAcknowledgedAtOk returns a tuple with the ExcessWeightAcknowledgedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MoveTaskOrder) GetExcessWeightAcknowledgedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcessWeightAcknowledgedAt.Get(), o.ExcessWeightAcknowledgedAt.IsSet()
}

// HasExcessWeightAcknowledgedAt returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasExcessWeightAcknowledgedAt() bool {
	if o != nil && o.ExcessWeightAcknowledgedAt.IsSet() {
		return true
	}

	return false
}

// SetExcessWeightAcknowledgedAt gets a reference to the given NullableTime and assigns it to the ExcessWeightAcknowledgedAt field.
func (o *MoveTaskOrder) SetExcessWeightAcknowledgedAt(v time.Time) {
	o.ExcessWeightAcknowledgedAt.Set(&v)
}
// SetExcessWeightAcknowledgedAtNil sets the value for ExcessWeightAcknowledgedAt to be an explicit nil
func (o *MoveTaskOrder) SetExcessWeightAcknowledgedAtNil() {
	o.ExcessWeightAcknowledgedAt.Set(nil)
}

// UnsetExcessWeightAcknowledgedAt ensures that no value is present for ExcessWeightAcknowledgedAt, not even an explicit nil
func (o *MoveTaskOrder) UnsetExcessWeightAcknowledgedAt() {
	o.ExcessWeightAcknowledgedAt.Unset()
}

// GetExcessWeightUploadId returns the ExcessWeightUploadId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MoveTaskOrder) GetExcessWeightUploadId() string {
	if o == nil || IsNil(o.ExcessWeightUploadId.Get()) {
		var ret string
		return ret
	}
	return *o.ExcessWeightUploadId.Get()
}

// GetExcessWeightUploadIdOk returns a tuple with the ExcessWeightUploadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MoveTaskOrder) GetExcessWeightUploadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcessWeightUploadId.Get(), o.ExcessWeightUploadId.IsSet()
}

// HasExcessWeightUploadId returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasExcessWeightUploadId() bool {
	if o != nil && o.ExcessWeightUploadId.IsSet() {
		return true
	}

	return false
}

// SetExcessWeightUploadId gets a reference to the given NullableString and assigns it to the ExcessWeightUploadId field.
func (o *MoveTaskOrder) SetExcessWeightUploadId(v string) {
	o.ExcessWeightUploadId.Set(&v)
}
// SetExcessWeightUploadIdNil sets the value for ExcessWeightUploadId to be an explicit nil
func (o *MoveTaskOrder) SetExcessWeightUploadIdNil() {
	o.ExcessWeightUploadId.Set(nil)
}

// UnsetExcessWeightUploadId ensures that no value is present for ExcessWeightUploadId, not even an explicit nil
func (o *MoveTaskOrder) UnsetExcessWeightUploadId() {
	o.ExcessWeightUploadId.Unset()
}

// GetETag returns the ETag field value if set, zero value otherwise.
func (o *MoveTaskOrder) GetETag() string {
	if o == nil || IsNil(o.ETag) {
		var ret string
		return ret
	}
	return *o.ETag
}

// GetETagOk returns a tuple with the ETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskOrder) GetETagOk() (*string, bool) {
	if o == nil || IsNil(o.ETag) {
		return nil, false
	}
	return o.ETag, true
}

// HasETag returns a boolean if a field has been set.
func (o *MoveTaskOrder) HasETag() bool {
	if o != nil && !IsNil(o.ETag) {
		return true
	}

	return false
}

// SetETag gets a reference to the given string and assigns it to the ETag field.
func (o *MoveTaskOrder) SetETag(v string) {
	o.ETag = &v
}

func (o MoveTaskOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoveTaskOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MoveCode) {
		toSerialize["moveCode"] = o.MoveCode
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.OrderID) {
		toSerialize["orderID"] = o.OrderID
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.ReferenceId) {
		toSerialize["referenceId"] = o.ReferenceId
	}
	if o.AvailableToPrimeAt.IsSet() {
		toSerialize["availableToPrimeAt"] = o.AvailableToPrimeAt.Get()
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.PrimeCounselingCompletedAt.IsSet() {
		toSerialize["primeCounselingCompletedAt"] = o.PrimeCounselingCompletedAt.Get()
	}
	toSerialize["paymentRequests"] = o.PaymentRequests
	toSerialize["mtoServiceItems"] = o.MtoServiceItems
	toSerialize["mtoShipments"] = o.MtoShipments
	if !IsNil(o.PpmType) {
		toSerialize["ppmType"] = o.PpmType
	}
	if !IsNil(o.PpmEstimatedWeight) {
		toSerialize["ppmEstimatedWeight"] = o.PpmEstimatedWeight
	}
	if o.ExcessWeightQualifiedAt.IsSet() {
		toSerialize["excessWeightQualifiedAt"] = o.ExcessWeightQualifiedAt.Get()
	}
	if o.ExcessWeightAcknowledgedAt.IsSet() {
		toSerialize["excessWeightAcknowledgedAt"] = o.ExcessWeightAcknowledgedAt.Get()
	}
	if o.ExcessWeightUploadId.IsSet() {
		toSerialize["excessWeightUploadId"] = o.ExcessWeightUploadId.Get()
	}
	if !IsNil(o.ETag) {
		toSerialize["eTag"] = o.ETag
	}
	return toSerialize, nil
}

func (o *MoveTaskOrder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"paymentRequests",
		"mtoServiceItems",
		"mtoShipments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMoveTaskOrder := _MoveTaskOrder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMoveTaskOrder)

	if err != nil {
		return err
	}

	*o = MoveTaskOrder(varMoveTaskOrder)

	return err
}

type NullableMoveTaskOrder struct {
	value *MoveTaskOrder
	isSet bool
}

func (v NullableMoveTaskOrder) Get() *MoveTaskOrder {
	return v.value
}

func (v *NullableMoveTaskOrder) Set(val *MoveTaskOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveTaskOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveTaskOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveTaskOrder(val *MoveTaskOrder) *NullableMoveTaskOrder {
	return &NullableMoveTaskOrder{value: val, isSet: true}
}

func (v NullableMoveTaskOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveTaskOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


