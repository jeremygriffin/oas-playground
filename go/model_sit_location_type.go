/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SITLocationType The list of SIT location types.
type SITLocationType string

// List of SITLocationType
const (
	ORIGIN SITLocationType = "ORIGIN"
	DESTINATION SITLocationType = "DESTINATION"
)

// All allowed values of SITLocationType enum
var AllowedSITLocationTypeEnumValues = []SITLocationType{
	"ORIGIN",
	"DESTINATION",
}

func (v *SITLocationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SITLocationType(value)
	for _, existing := range AllowedSITLocationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SITLocationType", value)
}

// NewSITLocationTypeFromValue returns a pointer to a valid SITLocationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSITLocationTypeFromValue(v string) (*SITLocationType, error) {
	ev := SITLocationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SITLocationType: valid values are %v", v, AllowedSITLocationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SITLocationType) IsValid() bool {
	for _, existing := range AllowedSITLocationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SITLocationType value
func (v SITLocationType) Ptr() *SITLocationType {
	return &v
}

type NullableSITLocationType struct {
	value *SITLocationType
	isSet bool
}

func (v NullableSITLocationType) Get() *SITLocationType {
	return v.value
}

func (v *NullableSITLocationType) Set(val *SITLocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableSITLocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableSITLocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSITLocationType(val *SITLocationType) *NullableSITLocationType {
	return &NullableSITLocationType{value: val, isSet: true}
}

func (v NullableSITLocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSITLocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

