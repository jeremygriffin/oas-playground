/*
MilMove Prime V2 API

The Prime V2 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v2/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateShipmentDestinationAddressV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateShipmentDestinationAddressV2{}

// UpdateShipmentDestinationAddressV2 UpdateShipmentDestinationAddress contains the fields required for the prime to request an update for the destination address on an MTO Shipment.
type UpdateShipmentDestinationAddressV2 struct {
	NewAddress AddressV2V2 `json:"newAddress"`
	// This is the remark the Prime has entered, which would be the reason there is an address change.
	ContractorRemarks string `json:"contractorRemarks"`
}

type _UpdateShipmentDestinationAddressV2 UpdateShipmentDestinationAddressV2

// NewUpdateShipmentDestinationAddressV2 instantiates a new UpdateShipmentDestinationAddressV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateShipmentDestinationAddressV2(newAddress AddressV2V2, contractorRemarks string) *UpdateShipmentDestinationAddressV2 {
	this := UpdateShipmentDestinationAddressV2{}
	this.NewAddress = newAddress
	this.ContractorRemarks = contractorRemarks
	return &this
}

// NewUpdateShipmentDestinationAddressV2WithDefaults instantiates a new UpdateShipmentDestinationAddressV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateShipmentDestinationAddressV2WithDefaults() *UpdateShipmentDestinationAddressV2 {
	this := UpdateShipmentDestinationAddressV2{}
	return &this
}

// GetNewAddress returns the NewAddress field value
func (o *UpdateShipmentDestinationAddressV2) GetNewAddress() AddressV2V2 {
	if o == nil {
		var ret AddressV2V2
		return ret
	}

	return o.NewAddress
}

// GetNewAddressOk returns a tuple with the NewAddress field value
// and a boolean to check if the value has been set.
func (o *UpdateShipmentDestinationAddressV2) GetNewAddressOk() (*AddressV2V2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewAddress, true
}

// SetNewAddress sets field value
func (o *UpdateShipmentDestinationAddressV2) SetNewAddress(v AddressV2V2) {
	o.NewAddress = v
}

// GetContractorRemarks returns the ContractorRemarks field value
func (o *UpdateShipmentDestinationAddressV2) GetContractorRemarks() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractorRemarks
}

// GetContractorRemarksOk returns a tuple with the ContractorRemarks field value
// and a boolean to check if the value has been set.
func (o *UpdateShipmentDestinationAddressV2) GetContractorRemarksOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractorRemarks, true
}

// SetContractorRemarks sets field value
func (o *UpdateShipmentDestinationAddressV2) SetContractorRemarks(v string) {
	o.ContractorRemarks = v
}

func (o UpdateShipmentDestinationAddressV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateShipmentDestinationAddressV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["newAddress"] = o.NewAddress
	toSerialize["contractorRemarks"] = o.ContractorRemarks
	return toSerialize, nil
}

func (o *UpdateShipmentDestinationAddressV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"newAddress",
		"contractorRemarks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateShipmentDestinationAddressV2 := _UpdateShipmentDestinationAddressV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateShipmentDestinationAddressV2)

	if err != nil {
		return err
	}

	*o = UpdateShipmentDestinationAddressV2(varUpdateShipmentDestinationAddressV2)

	return err
}

type NullableUpdateShipmentDestinationAddressV2 struct {
	value *UpdateShipmentDestinationAddressV2
	isSet bool
}

func (v NullableUpdateShipmentDestinationAddressV2) Get() *UpdateShipmentDestinationAddressV2 {
	return v.value
}

func (v *NullableUpdateShipmentDestinationAddressV2) Set(val *UpdateShipmentDestinationAddressV2) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateShipmentDestinationAddressV2) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateShipmentDestinationAddressV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateShipmentDestinationAddressV2(val *UpdateShipmentDestinationAddressV2) *NullableUpdateShipmentDestinationAddressV2 {
	return &NullableUpdateShipmentDestinationAddressV2{value: val, isSet: true}
}

func (v NullableUpdateShipmentDestinationAddressV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateShipmentDestinationAddressV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


