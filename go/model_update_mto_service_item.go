/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateMTOServiceItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMTOServiceItem{}

// UpdateMTOServiceItem UpdateMTOServiceItem describes a base type of a service item. Polymorphic type. Both Move Task Orders and MTO Shipments will have MTO Service Items.
type UpdateMTOServiceItem struct {
	// ID of the service item. Must match path.
	Id *string `json:"id,omitempty"`
	ModelType UpdateMTOServiceItemModelType `json:"modelType"`
}

type _UpdateMTOServiceItem UpdateMTOServiceItem

// NewUpdateMTOServiceItem instantiates a new UpdateMTOServiceItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMTOServiceItem(modelType UpdateMTOServiceItemModelType) *UpdateMTOServiceItem {
	this := UpdateMTOServiceItem{}
	this.ModelType = modelType
	return &this
}

// NewUpdateMTOServiceItemWithDefaults instantiates a new UpdateMTOServiceItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMTOServiceItemWithDefaults() *UpdateMTOServiceItem {
	this := UpdateMTOServiceItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateMTOServiceItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMTOServiceItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateMTOServiceItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdateMTOServiceItem) SetId(v string) {
	o.Id = &v
}

// GetModelType returns the ModelType field value
func (o *UpdateMTOServiceItem) GetModelType() UpdateMTOServiceItemModelType {
	if o == nil {
		var ret UpdateMTOServiceItemModelType
		return ret
	}

	return o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value
// and a boolean to check if the value has been set.
func (o *UpdateMTOServiceItem) GetModelTypeOk() (*UpdateMTOServiceItemModelType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModelType, true
}

// SetModelType sets field value
func (o *UpdateMTOServiceItem) SetModelType(v UpdateMTOServiceItemModelType) {
	o.ModelType = v
}

func (o UpdateMTOServiceItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMTOServiceItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["modelType"] = o.ModelType
	return toSerialize, nil
}

func (o *UpdateMTOServiceItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"modelType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateMTOServiceItem := _UpdateMTOServiceItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateMTOServiceItem)

	if err != nil {
		return err
	}

	*o = UpdateMTOServiceItem(varUpdateMTOServiceItem)

	return err
}

type NullableUpdateMTOServiceItem struct {
	value *UpdateMTOServiceItem
	isSet bool
}

func (v NullableUpdateMTOServiceItem) Get() *UpdateMTOServiceItem {
	return v.value
}

func (v *NullableUpdateMTOServiceItem) Set(val *UpdateMTOServiceItem) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMTOServiceItem) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMTOServiceItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMTOServiceItem(val *UpdateMTOServiceItem) *NullableUpdateMTOServiceItem {
	return &NullableUpdateMTOServiceItem{value: val, isSet: true}
}

func (v NullableUpdateMTOServiceItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMTOServiceItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


