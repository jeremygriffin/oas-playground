/*
MilMove Prime V3 API

The Prime V3 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v3/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReweighRequesterV3 the model 'ReweighRequesterV3'
type ReweighRequesterV3 string

// List of ReweighRequester
const (
	CUSTOMER ReweighRequesterV3 = "CUSTOMER"
	PRIME ReweighRequesterV3 = "PRIME"
	SYSTEM ReweighRequesterV3 = "SYSTEM"
	TOO ReweighRequesterV3 = "TOO"
)

// All allowed values of ReweighRequesterV3 enum
var AllowedReweighRequesterV3EnumValues = []ReweighRequesterV3{
	"CUSTOMER",
	"PRIME",
	"SYSTEM",
	"TOO",
}

func (v *ReweighRequesterV3) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReweighRequesterV3(value)
	for _, existing := range AllowedReweighRequesterV3EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReweighRequesterV3", value)
}

// NewReweighRequesterV3FromValue returns a pointer to a valid ReweighRequesterV3
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReweighRequesterV3FromValue(v string) (*ReweighRequesterV3, error) {
	ev := ReweighRequesterV3(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReweighRequesterV3: valid values are %v", v, AllowedReweighRequesterV3EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReweighRequesterV3) IsValid() bool {
	for _, existing := range AllowedReweighRequesterV3EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReweighRequester value
func (v ReweighRequesterV3) Ptr() *ReweighRequesterV3 {
	return &v
}

type NullableReweighRequesterV3 struct {
	value *ReweighRequesterV3
	isSet bool
}

func (v NullableReweighRequesterV3) Get() *ReweighRequesterV3 {
	return v.value
}

func (v *NullableReweighRequesterV3) Set(val *ReweighRequesterV3) {
	v.value = val
	v.isSet = true
}

func (v NullableReweighRequesterV3) IsSet() bool {
	return v.isSet
}

func (v *NullableReweighRequesterV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReweighRequesterV3(val *ReweighRequesterV3) *NullableReweighRequesterV3 {
	return &NullableReweighRequesterV3{value: val, isSet: true}
}

func (v NullableReweighRequesterV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReweighRequesterV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

