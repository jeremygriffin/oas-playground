/*
MilMove Prime V2 API

The Prime V2 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v2/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrdersTypeV2 the model 'OrdersTypeV2'
type OrdersTypeV2 string

// List of OrdersType
const (
	PERMANENT_CHANGE_OF_STATION OrdersTypeV2 = "PERMANENT_CHANGE_OF_STATION"
	LOCAL_MOVE OrdersTypeV2 = "LOCAL_MOVE"
	RETIREMENT OrdersTypeV2 = "RETIREMENT"
	SEPARATION OrdersTypeV2 = "SEPARATION"
	WOUNDED_WARRIOR OrdersTypeV2 = "WOUNDED_WARRIOR"
	BLUEBARK OrdersTypeV2 = "BLUEBARK"
	SAFETY OrdersTypeV2 = "SAFETY"
)

// All allowed values of OrdersTypeV2 enum
var AllowedOrdersTypeV2EnumValues = []OrdersTypeV2{
	"PERMANENT_CHANGE_OF_STATION",
	"LOCAL_MOVE",
	"RETIREMENT",
	"SEPARATION",
	"WOUNDED_WARRIOR",
	"BLUEBARK",
	"SAFETY",
}

func (v *OrdersTypeV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrdersTypeV2(value)
	for _, existing := range AllowedOrdersTypeV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrdersTypeV2", value)
}

// NewOrdersTypeV2FromValue returns a pointer to a valid OrdersTypeV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrdersTypeV2FromValue(v string) (*OrdersTypeV2, error) {
	ev := OrdersTypeV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrdersTypeV2: valid values are %v", v, AllowedOrdersTypeV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrdersTypeV2) IsValid() bool {
	for _, existing := range AllowedOrdersTypeV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrdersType value
func (v OrdersTypeV2) Ptr() *OrdersTypeV2 {
	return &v
}

type NullableOrdersTypeV2 struct {
	value *OrdersTypeV2
	isSet bool
}

func (v NullableOrdersTypeV2) Get() *OrdersTypeV2 {
	return v.value
}

func (v *NullableOrdersTypeV2) Set(val *OrdersTypeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersTypeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersTypeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersTypeV2(val *OrdersTypeV2) *NullableOrdersTypeV2 {
	return &NullableOrdersTypeV2{value: val, isSet: true}
}

func (v NullableOrdersTypeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersTypeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

