/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateReweigh type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateReweigh{}

// UpdateReweigh Contains the fields available to the Prime when updating a reweigh record.
type UpdateReweigh struct {
	// The total reweighed weight for the shipment in pounds.
	Weight NullableInt32 `json:"weight,omitempty"`
	// In lieu of a document being uploaded indicating why a reweigh did not occur.
	VerificationReason NullableString `json:"verificationReason,omitempty"`
}

// NewUpdateReweigh instantiates a new UpdateReweigh object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateReweigh() *UpdateReweigh {
	this := UpdateReweigh{}
	return &this
}

// NewUpdateReweighWithDefaults instantiates a new UpdateReweigh object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateReweighWithDefaults() *UpdateReweigh {
	this := UpdateReweigh{}
	return &this
}

// GetWeight returns the Weight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateReweigh) GetWeight() int32 {
	if o == nil || IsNil(o.Weight.Get()) {
		var ret int32
		return ret
	}
	return *o.Weight.Get()
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateReweigh) GetWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weight.Get(), o.Weight.IsSet()
}

// HasWeight returns a boolean if a field has been set.
func (o *UpdateReweigh) HasWeight() bool {
	if o != nil && o.Weight.IsSet() {
		return true
	}

	return false
}

// SetWeight gets a reference to the given NullableInt32 and assigns it to the Weight field.
func (o *UpdateReweigh) SetWeight(v int32) {
	o.Weight.Set(&v)
}
// SetWeightNil sets the value for Weight to be an explicit nil
func (o *UpdateReweigh) SetWeightNil() {
	o.Weight.Set(nil)
}

// UnsetWeight ensures that no value is present for Weight, not even an explicit nil
func (o *UpdateReweigh) UnsetWeight() {
	o.Weight.Unset()
}

// GetVerificationReason returns the VerificationReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateReweigh) GetVerificationReason() string {
	if o == nil || IsNil(o.VerificationReason.Get()) {
		var ret string
		return ret
	}
	return *o.VerificationReason.Get()
}

// GetVerificationReasonOk returns a tuple with the VerificationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateReweigh) GetVerificationReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VerificationReason.Get(), o.VerificationReason.IsSet()
}

// HasVerificationReason returns a boolean if a field has been set.
func (o *UpdateReweigh) HasVerificationReason() bool {
	if o != nil && o.VerificationReason.IsSet() {
		return true
	}

	return false
}

// SetVerificationReason gets a reference to the given NullableString and assigns it to the VerificationReason field.
func (o *UpdateReweigh) SetVerificationReason(v string) {
	o.VerificationReason.Set(&v)
}
// SetVerificationReasonNil sets the value for VerificationReason to be an explicit nil
func (o *UpdateReweigh) SetVerificationReasonNil() {
	o.VerificationReason.Set(nil)
}

// UnsetVerificationReason ensures that no value is present for VerificationReason, not even an explicit nil
func (o *UpdateReweigh) UnsetVerificationReason() {
	o.VerificationReason.Unset()
}

func (o UpdateReweigh) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateReweigh) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Weight.IsSet() {
		toSerialize["weight"] = o.Weight.Get()
	}
	if o.VerificationReason.IsSet() {
		toSerialize["verificationReason"] = o.VerificationReason.Get()
	}
	return toSerialize, nil
}

type NullableUpdateReweigh struct {
	value *UpdateReweigh
	isSet bool
}

func (v NullableUpdateReweigh) Get() *UpdateReweigh {
	return v.value
}

func (v *NullableUpdateReweigh) Set(val *UpdateReweigh) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateReweigh) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateReweigh) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateReweigh(val *UpdateReweigh) *NullableUpdateReweigh {
	return &NullableUpdateReweigh{value: val, isSet: true}
}

func (v NullableUpdateReweigh) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateReweigh) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


