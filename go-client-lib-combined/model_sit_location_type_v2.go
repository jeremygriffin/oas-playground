/*
MilMove Prime V2 API

The Prime V2 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v2/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SITLocationTypeV2 The list of SIT location types.
type SITLocationTypeV2 string

// List of SITLocationType
const (
	ORIGIN SITLocationTypeV2 = "ORIGIN"
	DESTINATION SITLocationTypeV2 = "DESTINATION"
)

// All allowed values of SITLocationTypeV2 enum
var AllowedSITLocationTypeV2EnumValues = []SITLocationTypeV2{
	"ORIGIN",
	"DESTINATION",
}

func (v *SITLocationTypeV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SITLocationTypeV2(value)
	for _, existing := range AllowedSITLocationTypeV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SITLocationTypeV2", value)
}

// NewSITLocationTypeV2FromValue returns a pointer to a valid SITLocationTypeV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSITLocationTypeV2FromValue(v string) (*SITLocationTypeV2, error) {
	ev := SITLocationTypeV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SITLocationTypeV2: valid values are %v", v, AllowedSITLocationTypeV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SITLocationTypeV2) IsValid() bool {
	for _, existing := range AllowedSITLocationTypeV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SITLocationType value
func (v SITLocationTypeV2) Ptr() *SITLocationTypeV2 {
	return &v
}

type NullableSITLocationTypeV2 struct {
	value *SITLocationTypeV2
	isSet bool
}

func (v NullableSITLocationTypeV2) Get() *SITLocationTypeV2 {
	return v.value
}

func (v *NullableSITLocationTypeV2) Set(val *SITLocationTypeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableSITLocationTypeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableSITLocationTypeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSITLocationTypeV2(val *SITLocationTypeV2) *NullableSITLocationTypeV2 {
	return &NullableSITLocationTypeV2{value: val, isSet: true}
}

func (v NullableSITLocationTypeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSITLocationTypeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

