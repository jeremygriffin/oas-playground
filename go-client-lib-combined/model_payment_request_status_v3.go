/*
MilMove Prime V3 API

The Prime V3 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v3/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PaymentRequestStatusV3 the model 'PaymentRequestStatusV3'
type PaymentRequestStatusV3 string

// List of PaymentRequestStatus
const (
	PENDING PaymentRequestStatusV3 = "PENDING"
	REVIEWED PaymentRequestStatusV3 = "REVIEWED"
	REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED PaymentRequestStatusV3 = "REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED"
	SENT_TO_GEX PaymentRequestStatusV3 = "SENT_TO_GEX"
	RECEIVED_BY_GEX PaymentRequestStatusV3 = "RECEIVED_BY_GEX"
	PAID PaymentRequestStatusV3 = "PAID"
	EDI_ERROR PaymentRequestStatusV3 = "EDI_ERROR"
	DEPRECATED PaymentRequestStatusV3 = "DEPRECATED"
)

// All allowed values of PaymentRequestStatusV3 enum
var AllowedPaymentRequestStatusV3EnumValues = []PaymentRequestStatusV3{
	"PENDING",
	"REVIEWED",
	"REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED",
	"SENT_TO_GEX",
	"RECEIVED_BY_GEX",
	"PAID",
	"EDI_ERROR",
	"DEPRECATED",
}

func (v *PaymentRequestStatusV3) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentRequestStatusV3(value)
	for _, existing := range AllowedPaymentRequestStatusV3EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentRequestStatusV3", value)
}

// NewPaymentRequestStatusV3FromValue returns a pointer to a valid PaymentRequestStatusV3
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentRequestStatusV3FromValue(v string) (*PaymentRequestStatusV3, error) {
	ev := PaymentRequestStatusV3(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentRequestStatusV3: valid values are %v", v, AllowedPaymentRequestStatusV3EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentRequestStatusV3) IsValid() bool {
	for _, existing := range AllowedPaymentRequestStatusV3EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentRequestStatus value
func (v PaymentRequestStatusV3) Ptr() *PaymentRequestStatusV3 {
	return &v
}

type NullablePaymentRequestStatusV3 struct {
	value *PaymentRequestStatusV3
	isSet bool
}

func (v NullablePaymentRequestStatusV3) Get() *PaymentRequestStatusV3 {
	return v.value
}

func (v *NullablePaymentRequestStatusV3) Set(val *PaymentRequestStatusV3) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentRequestStatusV3) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentRequestStatusV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentRequestStatusV3(val *PaymentRequestStatusV3) *NullablePaymentRequestStatusV3 {
	return &NullablePaymentRequestStatusV3{value: val, isSet: true}
}

func (v NullablePaymentRequestStatusV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentRequestStatusV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

