/*
MilMove Prime V2 API

The Prime V2 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v2/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PPMShipmentStatusV2 Status of the PPM Shipment:   * **DRAFT**: The customer has created the PPM shipment but has not yet submitted their move for counseling.   * **SUBMITTED**: The shipment belongs to a move that has been submitted by the customer or has been created by a Service Counselor or Prime Contractor for a submitted move.   * **WAITING_ON_CUSTOMER**: The PPM shipment has been approved and the customer may now provide their actual move closeout information and documentation required to get paid.   * **NEEDS_ADVANCE_APPROVAL**: The shipment was counseled by the Prime Contractor and approved but an advance was requested so will need further financial approval from the government.   * **NEEDS_CLOSEOUT**: The customer has provided their closeout weight tickets, receipts, and expenses and certified it for the Service Counselor to approve, exclude or reject.   * **CLOSEOUT_COMPLETE**: The Service Counselor has reviewed all of the customer's PPM closeout documentation and authorizes the customer can download and submit their finalized SSW packet. 
type PPMShipmentStatusV2 string

// List of PPMShipmentStatus
const (
	DRAFT PPMShipmentStatusV2 = "DRAFT"
	SUBMITTED PPMShipmentStatusV2 = "SUBMITTED"
	WAITING_ON_CUSTOMER PPMShipmentStatusV2 = "WAITING_ON_CUSTOMER"
	NEEDS_ADVANCE_APPROVAL PPMShipmentStatusV2 = "NEEDS_ADVANCE_APPROVAL"
	NEEDS_CLOSEOUT PPMShipmentStatusV2 = "NEEDS_CLOSEOUT"
	CLOSEOUT_COMPLETE PPMShipmentStatusV2 = "CLOSEOUT_COMPLETE"
)

// All allowed values of PPMShipmentStatusV2 enum
var AllowedPPMShipmentStatusV2EnumValues = []PPMShipmentStatusV2{
	"DRAFT",
	"SUBMITTED",
	"WAITING_ON_CUSTOMER",
	"NEEDS_ADVANCE_APPROVAL",
	"NEEDS_CLOSEOUT",
	"CLOSEOUT_COMPLETE",
}

func (v *PPMShipmentStatusV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PPMShipmentStatusV2(value)
	for _, existing := range AllowedPPMShipmentStatusV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PPMShipmentStatusV2", value)
}

// NewPPMShipmentStatusV2FromValue returns a pointer to a valid PPMShipmentStatusV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPPMShipmentStatusV2FromValue(v string) (*PPMShipmentStatusV2, error) {
	ev := PPMShipmentStatusV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PPMShipmentStatusV2: valid values are %v", v, AllowedPPMShipmentStatusV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PPMShipmentStatusV2) IsValid() bool {
	for _, existing := range AllowedPPMShipmentStatusV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PPMShipmentStatus value
func (v PPMShipmentStatusV2) Ptr() *PPMShipmentStatusV2 {
	return &v
}

type NullablePPMShipmentStatusV2 struct {
	value *PPMShipmentStatusV2
	isSet bool
}

func (v NullablePPMShipmentStatusV2) Get() *PPMShipmentStatusV2 {
	return v.value
}

func (v *NullablePPMShipmentStatusV2) Set(val *PPMShipmentStatusV2) {
	v.value = val
	v.isSet = true
}

func (v NullablePPMShipmentStatusV2) IsSet() bool {
	return v.isSet
}

func (v *NullablePPMShipmentStatusV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePPMShipmentStatusV2(val *PPMShipmentStatusV2) *NullablePPMShipmentStatusV2 {
	return &NullablePPMShipmentStatusV2{value: val, isSet: true}
}

func (v NullablePPMShipmentStatusV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePPMShipmentStatusV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

