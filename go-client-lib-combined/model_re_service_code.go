/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReServiceCode This is the full list of service items that can be found on a shipment. Not all service items may be requested by the Prime, but may be returned in a response.  Documentation of all the service items will be provided. 
type ReServiceCode string

// List of ReServiceCode
const (
	CS ReServiceCode = "CS"
	DBHF ReServiceCode = "DBHF"
	DBTF ReServiceCode = "DBTF"
	DCRT ReServiceCode = "DCRT"
	DDASIT ReServiceCode = "DDASIT"
	DDDSIT ReServiceCode = "DDDSIT"
	DDFSIT ReServiceCode = "DDFSIT"
	DDP ReServiceCode = "DDP"
	DDSHUT ReServiceCode = "DDSHUT"
	DLH ReServiceCode = "DLH"
	DMHF ReServiceCode = "DMHF"
	DNPK ReServiceCode = "DNPK"
	DOASIT ReServiceCode = "DOASIT"
	DOFSIT ReServiceCode = "DOFSIT"
	DOP ReServiceCode = "DOP"
	DOPSIT ReServiceCode = "DOPSIT"
	DOSHUT ReServiceCode = "DOSHUT"
	DPK ReServiceCode = "DPK"
	DSH ReServiceCode = "DSH"
	DUCRT ReServiceCode = "DUCRT"
	DUPK ReServiceCode = "DUPK"
	FSC ReServiceCode = "FSC"
	IBHF ReServiceCode = "IBHF"
	IBTF ReServiceCode = "IBTF"
	ICOLH ReServiceCode = "ICOLH"
	ICOUB ReServiceCode = "ICOUB"
	ICRT ReServiceCode = "ICRT"
	ICRTSA ReServiceCode = "ICRTSA"
	IDASIT ReServiceCode = "IDASIT"
	IDDSIT ReServiceCode = "IDDSIT"
	IDFSIT ReServiceCode = "IDFSIT"
	IDSHUT ReServiceCode = "IDSHUT"
	IHPK ReServiceCode = "IHPK"
	IHUPK ReServiceCode = "IHUPK"
	INPK ReServiceCode = "INPK"
	IOASIT ReServiceCode = "IOASIT"
	IOCLH ReServiceCode = "IOCLH"
	IOCUB ReServiceCode = "IOCUB"
	IOFSIT ReServiceCode = "IOFSIT"
	IOOLH ReServiceCode = "IOOLH"
	IOOUB ReServiceCode = "IOOUB"
	IOPSIT ReServiceCode = "IOPSIT"
	IOSHUT ReServiceCode = "IOSHUT"
	IUBPK ReServiceCode = "IUBPK"
	IUBUPK ReServiceCode = "IUBUPK"
	IUCRT ReServiceCode = "IUCRT"
	MS ReServiceCode = "MS"
	NSTH ReServiceCode = "NSTH"
	NSTUB ReServiceCode = "NSTUB"
)

// All allowed values of ReServiceCode enum
var AllowedReServiceCodeEnumValues = []ReServiceCode{
	"CS",
	"DBHF",
	"DBTF",
	"DCRT",
	"DDASIT",
	"DDDSIT",
	"DDFSIT",
	"DDP",
	"DDSHUT",
	"DLH",
	"DMHF",
	"DNPK",
	"DOASIT",
	"DOFSIT",
	"DOP",
	"DOPSIT",
	"DOSHUT",
	"DPK",
	"DSH",
	"DUCRT",
	"DUPK",
	"FSC",
	"IBHF",
	"IBTF",
	"ICOLH",
	"ICOUB",
	"ICRT",
	"ICRTSA",
	"IDASIT",
	"IDDSIT",
	"IDFSIT",
	"IDSHUT",
	"IHPK",
	"IHUPK",
	"INPK",
	"IOASIT",
	"IOCLH",
	"IOCUB",
	"IOFSIT",
	"IOOLH",
	"IOOUB",
	"IOPSIT",
	"IOSHUT",
	"IUBPK",
	"IUBUPK",
	"IUCRT",
	"MS",
	"NSTH",
	"NSTUB",
}

func (v *ReServiceCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReServiceCode(value)
	for _, existing := range AllowedReServiceCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReServiceCode", value)
}

// NewReServiceCodeFromValue returns a pointer to a valid ReServiceCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReServiceCodeFromValue(v string) (*ReServiceCode, error) {
	ev := ReServiceCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReServiceCode: valid values are %v", v, AllowedReServiceCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReServiceCode) IsValid() bool {
	for _, existing := range AllowedReServiceCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReServiceCode value
func (v ReServiceCode) Ptr() *ReServiceCode {
	return &v
}

type NullableReServiceCode struct {
	value *ReServiceCode
	isSet bool
}

func (v NullableReServiceCode) Get() *ReServiceCode {
	return v.value
}

func (v *NullableReServiceCode) Set(val *ReServiceCode) {
	v.value = val
	v.isSet = true
}

func (v NullableReServiceCode) IsSet() bool {
	return v.isSet
}

func (v *NullableReServiceCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReServiceCode(val *ReServiceCode) *NullableReServiceCode {
	return &NullableReServiceCode{value: val, isSet: true}
}

func (v NullableReServiceCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReServiceCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

