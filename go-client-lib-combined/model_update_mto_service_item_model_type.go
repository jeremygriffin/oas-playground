/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UpdateMTOServiceItemModelType Using this list, choose the correct modelType in the dropdown, corresponding to the service item type.   * DDDSIT - UpdateMTOServiceItemSIT   * DOPSIT - UpdateMTOServiceItemSIT   * DOASIT - UpdateMTOServiceItemSIT   * DOFSIT - UpdateMTOServiceItemSIT   * DDSHUT - UpdateMTOServiceItemShuttle   * DOSHUT - UpdateMTOServiceItemShuttle  The documentation will then update with the supported fields. 
type UpdateMTOServiceItemModelType string

// List of UpdateMTOServiceItemModelType
const (
	UPDATE_MTO_SERVICE_ITEM_SIT UpdateMTOServiceItemModelType = "UpdateMTOServiceItemSIT"
	UPDATE_MTO_SERVICE_ITEM_SHUTTLE UpdateMTOServiceItemModelType = "UpdateMTOServiceItemShuttle"
)

// All allowed values of UpdateMTOServiceItemModelType enum
var AllowedUpdateMTOServiceItemModelTypeEnumValues = []UpdateMTOServiceItemModelType{
	"UpdateMTOServiceItemSIT",
	"UpdateMTOServiceItemShuttle",
}

func (v *UpdateMTOServiceItemModelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UpdateMTOServiceItemModelType(value)
	for _, existing := range AllowedUpdateMTOServiceItemModelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UpdateMTOServiceItemModelType", value)
}

// NewUpdateMTOServiceItemModelTypeFromValue returns a pointer to a valid UpdateMTOServiceItemModelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUpdateMTOServiceItemModelTypeFromValue(v string) (*UpdateMTOServiceItemModelType, error) {
	ev := UpdateMTOServiceItemModelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UpdateMTOServiceItemModelType: valid values are %v", v, AllowedUpdateMTOServiceItemModelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UpdateMTOServiceItemModelType) IsValid() bool {
	for _, existing := range AllowedUpdateMTOServiceItemModelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UpdateMTOServiceItemModelType value
func (v UpdateMTOServiceItemModelType) Ptr() *UpdateMTOServiceItemModelType {
	return &v
}

type NullableUpdateMTOServiceItemModelType struct {
	value *UpdateMTOServiceItemModelType
	isSet bool
}

func (v NullableUpdateMTOServiceItemModelType) Get() *UpdateMTOServiceItemModelType {
	return v.value
}

func (v *NullableUpdateMTOServiceItemModelType) Set(val *UpdateMTOServiceItemModelType) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMTOServiceItemModelType) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMTOServiceItemModelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMTOServiceItemModelType(val *UpdateMTOServiceItemModelType) *NullableUpdateMTOServiceItemModelType {
	return &NullableUpdateMTOServiceItemModelType{value: val, isSet: true}
}

func (v NullableUpdateMTOServiceItemModelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMTOServiceItemModelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

