/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the SITExtension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SITExtension{}

// SITExtension A storage in transit (SIT) Extension is a request for an increase in the billable number of days a shipment is allowed to be in SIT.
type SITExtension struct {
	Id *string `json:"id,omitempty"`
	MtoShipmentID *string `json:"mtoShipmentID,omitempty"`
	RequestReason *string `json:"requestReason,omitempty"`
	ContractorRemarks NullableString `json:"contractorRemarks,omitempty"`
	RequestedDays *int32 `json:"requestedDays,omitempty"`
	Status *string `json:"status,omitempty"`
	ApprovedDays NullableInt32 `json:"approvedDays,omitempty"`
	DecisionDate NullableTime `json:"decisionDate,omitempty"`
	OfficeRemarks NullableString `json:"officeRemarks,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	ETag *string `json:"eTag,omitempty"`
}

// NewSITExtension instantiates a new SITExtension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSITExtension() *SITExtension {
	this := SITExtension{}
	return &this
}

// NewSITExtensionWithDefaults instantiates a new SITExtension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSITExtensionWithDefaults() *SITExtension {
	this := SITExtension{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SITExtension) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SITExtension) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SITExtension) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SITExtension) SetId(v string) {
	o.Id = &v
}

// GetMtoShipmentID returns the MtoShipmentID field value if set, zero value otherwise.
func (o *SITExtension) GetMtoShipmentID() string {
	if o == nil || IsNil(o.MtoShipmentID) {
		var ret string
		return ret
	}
	return *o.MtoShipmentID
}

// GetMtoShipmentIDOk returns a tuple with the MtoShipmentID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SITExtension) GetMtoShipmentIDOk() (*string, bool) {
	if o == nil || IsNil(o.MtoShipmentID) {
		return nil, false
	}
	return o.MtoShipmentID, true
}

// HasMtoShipmentID returns a boolean if a field has been set.
func (o *SITExtension) HasMtoShipmentID() bool {
	if o != nil && !IsNil(o.MtoShipmentID) {
		return true
	}

	return false
}

// SetMtoShipmentID gets a reference to the given string and assigns it to the MtoShipmentID field.
func (o *SITExtension) SetMtoShipmentID(v string) {
	o.MtoShipmentID = &v
}

// GetRequestReason returns the RequestReason field value if set, zero value otherwise.
func (o *SITExtension) GetRequestReason() string {
	if o == nil || IsNil(o.RequestReason) {
		var ret string
		return ret
	}
	return *o.RequestReason
}

// GetRequestReasonOk returns a tuple with the RequestReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SITExtension) GetRequestReasonOk() (*string, bool) {
	if o == nil || IsNil(o.RequestReason) {
		return nil, false
	}
	return o.RequestReason, true
}

// HasRequestReason returns a boolean if a field has been set.
func (o *SITExtension) HasRequestReason() bool {
	if o != nil && !IsNil(o.RequestReason) {
		return true
	}

	return false
}

// SetRequestReason gets a reference to the given string and assigns it to the RequestReason field.
func (o *SITExtension) SetRequestReason(v string) {
	o.RequestReason = &v
}

// GetContractorRemarks returns the ContractorRemarks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SITExtension) GetContractorRemarks() string {
	if o == nil || IsNil(o.ContractorRemarks.Get()) {
		var ret string
		return ret
	}
	return *o.ContractorRemarks.Get()
}

// GetContractorRemarksOk returns a tuple with the ContractorRemarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SITExtension) GetContractorRemarksOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContractorRemarks.Get(), o.ContractorRemarks.IsSet()
}

// HasContractorRemarks returns a boolean if a field has been set.
func (o *SITExtension) HasContractorRemarks() bool {
	if o != nil && o.ContractorRemarks.IsSet() {
		return true
	}

	return false
}

// SetContractorRemarks gets a reference to the given NullableString and assigns it to the ContractorRemarks field.
func (o *SITExtension) SetContractorRemarks(v string) {
	o.ContractorRemarks.Set(&v)
}
// SetContractorRemarksNil sets the value for ContractorRemarks to be an explicit nil
func (o *SITExtension) SetContractorRemarksNil() {
	o.ContractorRemarks.Set(nil)
}

// UnsetContractorRemarks ensures that no value is present for ContractorRemarks, not even an explicit nil
func (o *SITExtension) UnsetContractorRemarks() {
	o.ContractorRemarks.Unset()
}

// GetRequestedDays returns the RequestedDays field value if set, zero value otherwise.
func (o *SITExtension) GetRequestedDays() int32 {
	if o == nil || IsNil(o.RequestedDays) {
		var ret int32
		return ret
	}
	return *o.RequestedDays
}

// GetRequestedDaysOk returns a tuple with the RequestedDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SITExtension) GetRequestedDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.RequestedDays) {
		return nil, false
	}
	return o.RequestedDays, true
}

// HasRequestedDays returns a boolean if a field has been set.
func (o *SITExtension) HasRequestedDays() bool {
	if o != nil && !IsNil(o.RequestedDays) {
		return true
	}

	return false
}

// SetRequestedDays gets a reference to the given int32 and assigns it to the RequestedDays field.
func (o *SITExtension) SetRequestedDays(v int32) {
	o.RequestedDays = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SITExtension) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SITExtension) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SITExtension) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SITExtension) SetStatus(v string) {
	o.Status = &v
}

// GetApprovedDays returns the ApprovedDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SITExtension) GetApprovedDays() int32 {
	if o == nil || IsNil(o.ApprovedDays.Get()) {
		var ret int32
		return ret
	}
	return *o.ApprovedDays.Get()
}

// GetApprovedDaysOk returns a tuple with the ApprovedDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SITExtension) GetApprovedDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApprovedDays.Get(), o.ApprovedDays.IsSet()
}

// HasApprovedDays returns a boolean if a field has been set.
func (o *SITExtension) HasApprovedDays() bool {
	if o != nil && o.ApprovedDays.IsSet() {
		return true
	}

	return false
}

// SetApprovedDays gets a reference to the given NullableInt32 and assigns it to the ApprovedDays field.
func (o *SITExtension) SetApprovedDays(v int32) {
	o.ApprovedDays.Set(&v)
}
// SetApprovedDaysNil sets the value for ApprovedDays to be an explicit nil
func (o *SITExtension) SetApprovedDaysNil() {
	o.ApprovedDays.Set(nil)
}

// UnsetApprovedDays ensures that no value is present for ApprovedDays, not even an explicit nil
func (o *SITExtension) UnsetApprovedDays() {
	o.ApprovedDays.Unset()
}

// GetDecisionDate returns the DecisionDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SITExtension) GetDecisionDate() time.Time {
	if o == nil || IsNil(o.DecisionDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DecisionDate.Get()
}

// GetDecisionDateOk returns a tuple with the DecisionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SITExtension) GetDecisionDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionDate.Get(), o.DecisionDate.IsSet()
}

// HasDecisionDate returns a boolean if a field has been set.
func (o *SITExtension) HasDecisionDate() bool {
	if o != nil && o.DecisionDate.IsSet() {
		return true
	}

	return false
}

// SetDecisionDate gets a reference to the given NullableTime and assigns it to the DecisionDate field.
func (o *SITExtension) SetDecisionDate(v time.Time) {
	o.DecisionDate.Set(&v)
}
// SetDecisionDateNil sets the value for DecisionDate to be an explicit nil
func (o *SITExtension) SetDecisionDateNil() {
	o.DecisionDate.Set(nil)
}

// UnsetDecisionDate ensures that no value is present for DecisionDate, not even an explicit nil
func (o *SITExtension) UnsetDecisionDate() {
	o.DecisionDate.Unset()
}

// GetOfficeRemarks returns the OfficeRemarks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SITExtension) GetOfficeRemarks() string {
	if o == nil || IsNil(o.OfficeRemarks.Get()) {
		var ret string
		return ret
	}
	return *o.OfficeRemarks.Get()
}

// GetOfficeRemarksOk returns a tuple with the OfficeRemarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SITExtension) GetOfficeRemarksOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OfficeRemarks.Get(), o.OfficeRemarks.IsSet()
}

// HasOfficeRemarks returns a boolean if a field has been set.
func (o *SITExtension) HasOfficeRemarks() bool {
	if o != nil && o.OfficeRemarks.IsSet() {
		return true
	}

	return false
}

// SetOfficeRemarks gets a reference to the given NullableString and assigns it to the OfficeRemarks field.
func (o *SITExtension) SetOfficeRemarks(v string) {
	o.OfficeRemarks.Set(&v)
}
// SetOfficeRemarksNil sets the value for OfficeRemarks to be an explicit nil
func (o *SITExtension) SetOfficeRemarksNil() {
	o.OfficeRemarks.Set(nil)
}

// UnsetOfficeRemarks ensures that no value is present for OfficeRemarks, not even an explicit nil
func (o *SITExtension) UnsetOfficeRemarks() {
	o.OfficeRemarks.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SITExtension) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SITExtension) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SITExtension) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SITExtension) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SITExtension) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SITExtension) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SITExtension) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *SITExtension) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetETag returns the ETag field value if set, zero value otherwise.
func (o *SITExtension) GetETag() string {
	if o == nil || IsNil(o.ETag) {
		var ret string
		return ret
	}
	return *o.ETag
}

// GetETagOk returns a tuple with the ETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SITExtension) GetETagOk() (*string, bool) {
	if o == nil || IsNil(o.ETag) {
		return nil, false
	}
	return o.ETag, true
}

// HasETag returns a boolean if a field has been set.
func (o *SITExtension) HasETag() bool {
	if o != nil && !IsNil(o.ETag) {
		return true
	}

	return false
}

// SetETag gets a reference to the given string and assigns it to the ETag field.
func (o *SITExtension) SetETag(v string) {
	o.ETag = &v
}

func (o SITExtension) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SITExtension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MtoShipmentID) {
		toSerialize["mtoShipmentID"] = o.MtoShipmentID
	}
	if !IsNil(o.RequestReason) {
		toSerialize["requestReason"] = o.RequestReason
	}
	if o.ContractorRemarks.IsSet() {
		toSerialize["contractorRemarks"] = o.ContractorRemarks.Get()
	}
	if !IsNil(o.RequestedDays) {
		toSerialize["requestedDays"] = o.RequestedDays
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.ApprovedDays.IsSet() {
		toSerialize["approvedDays"] = o.ApprovedDays.Get()
	}
	if o.DecisionDate.IsSet() {
		toSerialize["decisionDate"] = o.DecisionDate.Get()
	}
	if o.OfficeRemarks.IsSet() {
		toSerialize["officeRemarks"] = o.OfficeRemarks.Get()
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.ETag) {
		toSerialize["eTag"] = o.ETag
	}
	return toSerialize, nil
}

type NullableSITExtension struct {
	value *SITExtension
	isSet bool
}

func (v NullableSITExtension) Get() *SITExtension {
	return v.value
}

func (v *NullableSITExtension) Set(val *SITExtension) {
	v.value = val
	v.isSet = true
}

func (v NullableSITExtension) IsSet() bool {
	return v.isSet
}

func (v *NullableSITExtension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSITExtension(val *SITExtension) *NullableSITExtension {
	return &NullableSITExtension{value: val, isSet: true}
}

func (v NullableSITExtension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSITExtension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


