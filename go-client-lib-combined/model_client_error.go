/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClientError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientError{}

// ClientError struct for ClientError
type ClientError struct {
	Title string `json:"title"`
	Detail string `json:"detail"`
	Instance string `json:"instance"`
}

type _ClientError ClientError

// NewClientError instantiates a new ClientError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientError(title string, detail string, instance string) *ClientError {
	this := ClientError{}
	this.Title = title
	this.Detail = detail
	this.Instance = instance
	return &this
}

// NewClientErrorWithDefaults instantiates a new ClientError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientErrorWithDefaults() *ClientError {
	this := ClientError{}
	return &this
}

// GetTitle returns the Title field value
func (o *ClientError) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ClientError) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ClientError) SetTitle(v string) {
	o.Title = v
}

// GetDetail returns the Detail field value
func (o *ClientError) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *ClientError) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *ClientError) SetDetail(v string) {
	o.Detail = v
}

// GetInstance returns the Instance field value
func (o *ClientError) GetInstance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value
// and a boolean to check if the value has been set.
func (o *ClientError) GetInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instance, true
}

// SetInstance sets field value
func (o *ClientError) SetInstance(v string) {
	o.Instance = v
}

func (o ClientError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	toSerialize["detail"] = o.Detail
	toSerialize["instance"] = o.Instance
	return toSerialize, nil
}

func (o *ClientError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"detail",
		"instance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClientError := _ClientError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClientError)

	if err != nil {
		return err
	}

	*o = ClientError(varClientError)

	return err
}

type NullableClientError struct {
	value *ClientError
	isSet bool
}

func (v NullableClientError) Get() *ClientError {
	return v.value
}

func (v *NullableClientError) Set(val *ClientError) {
	v.value = val
	v.isSet = true
}

func (v NullableClientError) IsSet() bool {
	return v.isSet
}

func (v *NullableClientError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientError(val *ClientError) *NullableClientError {
	return &NullableClientError{value: val, isSet: true}
}

func (v NullableClientError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


