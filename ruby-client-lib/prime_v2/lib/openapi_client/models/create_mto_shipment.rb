=begin
#MilMove Prime V2 API

#The Prime V2 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v2/`. 

The version of the OpenAPI document: 0.0.1
Contact: milmove-developers@caci.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class CreateMTOShipment
    # The ID of the move this new shipment is for.
    attr_accessor :move_task_order_id

    # The customer's preferred pickup date. Other dates, such as required delivery date and (outside MilMove) the pack date, are derived from this date. 
    attr_accessor :requested_pickup_date

    # The estimated weight of this shipment, determined by the movers during the pre-move survey. This value **can only be updated once.** If there was an issue with estimating the weight and a mistake was made, the Prime contractor will need to contact the TOO to change it. 
    attr_accessor :prime_estimated_weight

    # The customer can use the customer remarks field to inform the services counselor and the movers about any special circumstances for this shipment. Typical examples:   * bulky or fragile items,   * weapons,   * access info for their address.  Customer enters this information during onboarding. Optional field. 
    attr_accessor :customer_remarks

    # A list of the agents for a shipment. Agents are the people who the Prime contractor recognize as permitted to release (in the case of pickup) or receive (on delivery) a shipment. 
    attr_accessor :agents

    # A list of service items connected to this shipment.
    attr_accessor :mto_service_items

    # The address where the movers should pick up this shipment.
    attr_accessor :pickup_address

    # Where the movers should deliver this shipment.
    attr_accessor :destination_address

    attr_accessor :shipment_type

    # This value indicates whether or not this shipment is part of a diversion. If yes, the shipment can be either the starting or ending segment of the diversion. When this boolean is true, you must link it to a parent shipment with the divertedFromShipmentId parameter. 
    attr_accessor :diversion

    # The ID of the shipment this is a diversion from. Aka the \"Parent\" shipment. The diversion boolean must be true if this parameter is supplied in the request. If provided, and if the diverted from shipment is also a diversion, the previous should must then also have a parent ID. 
    attr_accessor :diverted_from_shipment_id

    # Email or ID of the person who will be contacted in the event of questions or concerns about this update. May be the person performing the update, or someone else working with the Prime contractor. 
    attr_accessor :point_of_contact

    attr_accessor :counselor_remarks

    attr_accessor :ppm_shipment

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'move_task_order_id' => :'moveTaskOrderID',
        :'requested_pickup_date' => :'requestedPickupDate',
        :'prime_estimated_weight' => :'primeEstimatedWeight',
        :'customer_remarks' => :'customerRemarks',
        :'agents' => :'agents',
        :'mto_service_items' => :'mtoServiceItems',
        :'pickup_address' => :'pickupAddress',
        :'destination_address' => :'destinationAddress',
        :'shipment_type' => :'shipmentType',
        :'diversion' => :'diversion',
        :'diverted_from_shipment_id' => :'divertedFromShipmentId',
        :'point_of_contact' => :'pointOfContact',
        :'counselor_remarks' => :'counselorRemarks',
        :'ppm_shipment' => :'ppmShipment'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'move_task_order_id' => :'String',
        :'requested_pickup_date' => :'Date',
        :'prime_estimated_weight' => :'Integer',
        :'customer_remarks' => :'String',
        :'agents' => :'Array<MTOAgent>',
        :'mto_service_items' => :'Array<MTOServiceItem>',
        :'pickup_address' => :'Address',
        :'destination_address' => :'Address',
        :'shipment_type' => :'MTOShipmentType',
        :'diversion' => :'Boolean',
        :'diverted_from_shipment_id' => :'String',
        :'point_of_contact' => :'String',
        :'counselor_remarks' => :'String',
        :'ppm_shipment' => :'CreatePPMShipment'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'requested_pickup_date',
        :'prime_estimated_weight',
        :'customer_remarks',
        :'counselor_remarks',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CreateMTOShipment` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CreateMTOShipment`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'move_task_order_id')
        self.move_task_order_id = attributes[:'move_task_order_id']
      else
        self.move_task_order_id = nil
      end

      if attributes.key?(:'requested_pickup_date')
        self.requested_pickup_date = attributes[:'requested_pickup_date']
      end

      if attributes.key?(:'prime_estimated_weight')
        self.prime_estimated_weight = attributes[:'prime_estimated_weight']
      end

      if attributes.key?(:'customer_remarks')
        self.customer_remarks = attributes[:'customer_remarks']
      end

      if attributes.key?(:'agents')
        if (value = attributes[:'agents']).is_a?(Array)
          self.agents = value
        end
      end

      if attributes.key?(:'mto_service_items')
        if (value = attributes[:'mto_service_items']).is_a?(Array)
          self.mto_service_items = value
        end
      end

      if attributes.key?(:'pickup_address')
        self.pickup_address = attributes[:'pickup_address']
      end

      if attributes.key?(:'destination_address')
        self.destination_address = attributes[:'destination_address']
      end

      if attributes.key?(:'shipment_type')
        self.shipment_type = attributes[:'shipment_type']
      else
        self.shipment_type = nil
      end

      if attributes.key?(:'diversion')
        self.diversion = attributes[:'diversion']
      end

      if attributes.key?(:'diverted_from_shipment_id')
        self.diverted_from_shipment_id = attributes[:'diverted_from_shipment_id']
      end

      if attributes.key?(:'point_of_contact')
        self.point_of_contact = attributes[:'point_of_contact']
      end

      if attributes.key?(:'counselor_remarks')
        self.counselor_remarks = attributes[:'counselor_remarks']
      end

      if attributes.key?(:'ppm_shipment')
        self.ppm_shipment = attributes[:'ppm_shipment']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @move_task_order_id.nil?
        invalid_properties.push('invalid value for "move_task_order_id", move_task_order_id cannot be nil.')
      end

      if !@prime_estimated_weight.nil? && @prime_estimated_weight < 1
        invalid_properties.push('invalid value for "prime_estimated_weight", must be greater than or equal to 1.')
      end

      if !@agents.nil? && @agents.length > 2
        invalid_properties.push('invalid value for "agents", number of items must be less than or equal to 2.')
      end

      if @shipment_type.nil?
        invalid_properties.push('invalid value for "shipment_type", shipment_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @move_task_order_id.nil?
      return false if !@prime_estimated_weight.nil? && @prime_estimated_weight < 1
      return false if !@agents.nil? && @agents.length > 2
      return false if @shipment_type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] prime_estimated_weight Value to be assigned
    def prime_estimated_weight=(prime_estimated_weight)
      if !prime_estimated_weight.nil? && prime_estimated_weight < 1
        fail ArgumentError, 'invalid value for "prime_estimated_weight", must be greater than or equal to 1.'
      end

      @prime_estimated_weight = prime_estimated_weight
    end

    # Custom attribute writer method with validation
    # @param [Object] agents Value to be assigned
    def agents=(agents)
      if agents.nil?
        fail ArgumentError, 'agents cannot be nil'
      end

      if agents.length > 2
        fail ArgumentError, 'invalid value for "agents", number of items must be less than or equal to 2.'
      end

      @agents = agents
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          move_task_order_id == o.move_task_order_id &&
          requested_pickup_date == o.requested_pickup_date &&
          prime_estimated_weight == o.prime_estimated_weight &&
          customer_remarks == o.customer_remarks &&
          agents == o.agents &&
          mto_service_items == o.mto_service_items &&
          pickup_address == o.pickup_address &&
          destination_address == o.destination_address &&
          shipment_type == o.shipment_type &&
          diversion == o.diversion &&
          diverted_from_shipment_id == o.diverted_from_shipment_id &&
          point_of_contact == o.point_of_contact &&
          counselor_remarks == o.counselor_remarks &&
          ppm_shipment == o.ppm_shipment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [move_task_order_id, requested_pickup_date, prime_estimated_weight, customer_remarks, agents, mto_service_items, pickup_address, destination_address, shipment_type, diversion, diverted_from_shipment_id, point_of_contact, counselor_remarks, ppm_shipment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
