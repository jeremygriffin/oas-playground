=begin
#MilMove Prime API

#The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

The version of the OpenAPI document: 0.0.1
Contact: milmove-developers@caci.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::MtoShipmentApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'MtoShipmentApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::MtoShipmentApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MtoShipmentApi' do
    it 'should create an instance of MtoShipmentApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::MtoShipmentApi)
    end
  end

  # unit tests for create_mto_agent
  # createMTOAgent
  # ### Functionality This endpoint is used to **create** and add agents for an existing MTO Shipment. Only the fields being modified need to be sent in the request body.  ### Errors The agent must always have a name and at least one method of contact (either &#x60;email&#x60; or &#x60;phone&#x60;).  The agent must be associated with the MTO shipment passed in the url.  The shipment should be associated with an MTO that is available to the Pime. If the caller requests a new agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response. 
  # @param mto_shipment_id UUID of the shipment associated with the agent
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [MTOAgent]
  describe 'create_mto_agent test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_mto_shipment
  # createMTOShipment
  # _[Deprecated: sunset on 2024-04-08]_ This endpoint is deprecated and will be removed in a future version. Please use the new endpoint at &#x60;/prime/v2/createMTOShipment&#x60; instead.  Creates a new shipment within the specified move. This endpoint should be used whenever the movers identify a need for an additional shipment. The new shipment will be submitted to the TOO for review, and the TOO must approve it before the contractor can proceed with billing.  **WIP**: The Prime should be notified by a push notification whenever the TOO approves a shipment connected to one of their moves. Otherwise, the Prime can fetch the related move using the [getMoveTaskOrder](#operation/getMoveTaskOrder) endpoint and see if this shipment has the status &#x60;\&quot;APPROVED\&quot;&#x60;. 
  # @param [Hash] opts the optional parameters
  # @option opts [CreateMTOShipment] :body 
  # @return [MTOShipment]
  describe 'create_mto_shipment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_sit_extension
  # createSITExtension
  # ### Functionality This endpoint creates a storage in transit (SIT) extension request for a shipment. A SIT extension request is a request an increase in the shipment day allowance for the number of days a shipment is allowed to be in SIT. The total SIT day allowance includes time spent in both origin and destination SIT. 
  # @param mto_shipment_id UUID of the shipment associated with the agent
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [SITExtension]
  describe 'create_sit_extension test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_mto_shipment
  # deleteMTOShipment
  # ### Functionality This endpoint deletes an individual shipment by ID.  ### Errors * The mtoShipment should be associated with an MTO that is available to prime. * The mtoShipment must be a PPM shipment. * Counseling should not have already been completed for the associated MTO. 
  # @param mto_shipment_id UUID of the shipment to be deleted
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_mto_shipment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_mto_agent
  # updateMTOAgent
  # ### Functionality This endpoint is used to **update** the agents for an MTO Shipment. Only the fields being modified need to be sent in the request body.  ### Errors: The agent must always have a name and at least one method of contact (either &#x60;email&#x60; or &#x60;phone&#x60;).  The agent must be associated with the MTO shipment passed in the url.  The shipment should be associated with an MTO that is available to the Prime. If the caller requests an update to an agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response. 
  # @param mto_shipment_id UUID of the shipment associated with the agent
  # @param agent_id UUID of the agent being updated
  # @param if_match Optimistic locking is implemented via the &#x60;If-Match&#x60; header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a &#x60;412 Precondition Failed&#x60; error. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [MTOAgent]
  describe 'update_mto_agent test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_mto_shipment
  # updateMTOShipment
  # _[Deprecated: sunset on August 5th, 2024]_ This endpoint is deprecated and will be removed in a future version. Please use the new endpoint at &#x60;/prime/v2/updateMTOShipment&#x60; instead.  **DEPRECATION ON AUGUST 5TH, 2024** Following deprecation, there is an edge case scenario where a PPM shipment with no addresses could be updated and it would also update the final destination SIT address for SIT service items. This edge case has been removed as you should not be able to update items using this endpoint. Third-party APIs have confirmed they will require deprecation for this change.  Updates an existing shipment for a move.  Note that there are some restrictions on nested objects:  * Service items: You cannot add or update service items using this endpoint. Please use [createMTOServiceItem](#operation/createMTOServiceItem) and [updateMTOServiceItem](#operation/updateMTOServiceItem) instead. * Agents: You cannot add or update agents using this endpoint. Please use [createMTOAgent](#operation/createMTOAgent) and [updateMTOAgent](#operation/updateMTOAgent) instead. * Addresses: You can add new addresses using this endpoint (and must use this endpoint to do so), but you cannot update existing ones. Please use [updateMTOShipmentAddress](#operation/updateMTOShipmentAddress) instead.  These restrictions are due to our [optimistic locking/concurrency control](https://transcom.github.io/mymove-docs/docs/dev/contributing/backend/use-optimistic-locking) mechanism.  Note that some fields cannot be manually changed but will still be updated automatically, such as &#x60;primeEstimatedWeightRecordedDate&#x60; and &#x60;requiredDeliveryDate&#x60;. 
  # @param mto_shipment_id UUID of the shipment being updated.
  # @param if_match Optimistic locking is implemented via the &#x60;If-Match&#x60; header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a &#x60;412 Precondition Failed&#x60; error. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [MTOShipment]
  describe 'update_mto_shipment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_mto_shipment_address
  # updateMTOShipmentAddress
  # ### Functionality This endpoint is used to **update** the pickup, secondary, and destination addresses on an MTO Shipment. mto-shipments/{mtoShipmentID}/shipment-address-updates is for updating a delivery address. The address details completely replace the original, except for the UUID. Therefore a complete address should be sent in the request. When a destination address on a shipment is updated, the destination SIT service items address ID will also be updated so that shipment and service item final destinations match.  This endpoint **cannot create** an address. To create an address on an MTO shipment, the caller must use [updateMTOShipment](#operation/updateMTOShipment) as the parent shipment has to be updated with the appropriate link to the address.  ### Errors The address must be associated with the mtoShipment passed in the url. In other words, it should be listed as pickupAddress, destinationAddress, secondaryPickupAddress or secondaryDeliveryAddress on the mtoShipment provided. If it is not, caller will receive a **Conflict** Error.  The mtoShipment should be associated with an MTO that is available to prime. If the caller requests an update to an address, and the shipment is not on an available MTO, the caller will receive a **NotFound** Error. 
  # @param mto_shipment_id UUID of the shipment associated with the address
  # @param address_id UUID of the address being updated
  # @param if_match Optimistic locking is implemented via the &#x60;If-Match&#x60; header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a &#x60;412 Precondition Failed&#x60; error. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Address]
  describe 'update_mto_shipment_address test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_mto_shipment_status
  # updateMTOShipmentStatus
  # ### Functionality This endpoint should be used by the Prime to confirm the cancellation of a shipment. It allows the shipment status to be changed to \&quot;CANCELED.\&quot; Currently, the Prime cannot update the shipment to any other status. 
  # @param mto_shipment_id UUID of the shipment associated with the agent
  # @param if_match Optimistic locking is implemented via the &#x60;If-Match&#x60; header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a &#x60;412 Precondition Failed&#x60; error. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [MTOShipment]
  describe 'update_mto_shipment_status test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_reweigh
  # updateReweigh
  # ### Functionality This endpoint can be used to update a reweigh with a new weight or to provide the reason why a reweigh did not occur. Only one of weight or verificationReason should be sent in the request body.  A reweigh is the second recorded weight for a shipment, as validated by certified weight tickets. Applies to one shipment. A reweigh can be triggered automatically, or requested by the customer or transportation office. Not all shipments are reweighed, so not all shipments will have a reweigh weight. 
  # @param mto_shipment_id UUID of the shipment associated with the reweigh
  # @param reweigh_id UUID of the reweigh being updated
  # @param if_match Optimistic locking is implemented via the &#x60;If-Match&#x60; header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a &#x60;412 Precondition Failed&#x60; error. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Reweigh]
  describe 'update_reweigh test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_shipment_destination_address
  # updateShipmentDestinationAddress
  # ### Functionality This endpoint is used so the Prime can request an **update** for the destination address on an MTO Shipment, after the destination address has already been approved. If automatically approved or TOO approves, this will update the final destination address values for destination SIT service items to be the same as the changed destination address that was approved. Address updates will be automatically approved unless they change:   - The service area   - Mileage bracket for direct delivery   - the address and the distance between the old and new address is &gt; 50   - Domestic Short Haul to Domestic Line Haul or vice versa       - Shipments that start and end in one ZIP3 use Short Haul pricing       - Shipments that start and end in different ZIP3s use Line Haul pricing  For those, changes will require TOO approval. 
  # @param mto_shipment_id UUID of the shipment associated with the address
  # @param if_match Needs to be the eTag of the mtoShipment. Optimistic locking is implemented via the &#x60;If-Match&#x60; header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a &#x60;412 Precondition Failed&#x60; error. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ShipmentAddressUpdate]
  describe 'update_shipment_destination_address test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
