=begin
#MilMove Prime API

#The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

The version of the OpenAPI document: 0.0.1
Contact: milmove-developers@caci.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class MoveTaskOrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # createExcessWeightRecord
    # Uploads an excess weight record, which is a document that proves that the movers or contractors have counseled the customer about their excess weight. Excess weight counseling should occur after the sum of the shipments for the customer's move crosses the excess weight alert threshold. 
    # @param move_task_order_id [String] UUID of the move being updated.
    # @param file [File] The file to upload.
    # @param [Hash] opts the optional parameters
    # @return [ExcessWeightRecord]
    def create_excess_weight_record(move_task_order_id, file, opts = {})
      data, _status_code, _headers = create_excess_weight_record_with_http_info(move_task_order_id, file, opts)
      data
    end

    # createExcessWeightRecord
    # Uploads an excess weight record, which is a document that proves that the movers or contractors have counseled the customer about their excess weight. Excess weight counseling should occur after the sum of the shipments for the customer&#39;s move crosses the excess weight alert threshold. 
    # @param move_task_order_id [String] UUID of the move being updated.
    # @param file [File] The file to upload.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExcessWeightRecord, Integer, Hash)>] ExcessWeightRecord data, response status code and response headers
    def create_excess_weight_record_with_http_info(move_task_order_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoveTaskOrderApi.create_excess_weight_record ...'
      end
      # verify the required parameter 'move_task_order_id' is set
      if @api_client.config.client_side_validation && move_task_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'move_task_order_id' when calling MoveTaskOrderApi.create_excess_weight_record"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling MoveTaskOrderApi.create_excess_weight_record"
      end
      # resource path
      local_var_path = '/move-task-orders/{moveTaskOrderID}/excess-weight-record'.sub('{' + 'moveTaskOrderID' + '}', CGI.escape(move_task_order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExcessWeightRecord'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MoveTaskOrderApi.create_excess_weight_record",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoveTaskOrderApi#create_excess_weight_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Downloads move order as a PDF
    # ### Functionality This endpoint downloads all uploaded move order documentations into one download file by locator.  ### Errors * The move must be in need counseling state. * The move client's origin duty location must not currently have gov counseling. 
    # @param locator [String] the locator code for move order to be downloaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type upload type (default to 'ALL')
    # @return [File]
    def download_move_order(locator, opts = {})
      data, _status_code, _headers = download_move_order_with_http_info(locator, opts)
      data
    end

    # Downloads move order as a PDF
    # ### Functionality This endpoint downloads all uploaded move order documentations into one download file by locator.  ### Errors * The move must be in need counseling state. * The move client&#39;s origin duty location must not currently have gov counseling. 
    # @param locator [String] the locator code for move order to be downloaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type upload type (default to 'ALL')
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def download_move_order_with_http_info(locator, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoveTaskOrderApi.download_move_order ...'
      end
      # verify the required parameter 'locator' is set
      if @api_client.config.client_side_validation && locator.nil?
        fail ArgumentError, "Missing the required parameter 'locator' when calling MoveTaskOrderApi.download_move_order"
      end
      allowable_values = ["ALL", "ORDERS", "AMENDMENTS"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/moves/{locator}/documents'.sub('{' + 'locator' + '}', CGI.escape(locator.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MoveTaskOrderApi.download_move_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoveTaskOrderApi#download_move_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMoveTaskOrder
    # ### Functionality This endpoint gets an individual MoveTaskOrder by ID.  It will provide information about the Customer and any associated MTOShipments, MTOServiceItems and PaymentRequests. 
    # @param move_id [String] UUID or MoveCode of move task order to use.
    # @param [Hash] opts the optional parameters
    # @return [MoveTaskOrder]
    def get_move_task_order(move_id, opts = {})
      data, _status_code, _headers = get_move_task_order_with_http_info(move_id, opts)
      data
    end

    # getMoveTaskOrder
    # ### Functionality This endpoint gets an individual MoveTaskOrder by ID.  It will provide information about the Customer and any associated MTOShipments, MTOServiceItems and PaymentRequests. 
    # @param move_id [String] UUID or MoveCode of move task order to use.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MoveTaskOrder, Integer, Hash)>] MoveTaskOrder data, response status code and response headers
    def get_move_task_order_with_http_info(move_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoveTaskOrderApi.get_move_task_order ...'
      end
      # verify the required parameter 'move_id' is set
      if @api_client.config.client_side_validation && move_id.nil?
        fail ArgumentError, "Missing the required parameter 'move_id' when calling MoveTaskOrderApi.get_move_task_order"
      end
      # resource path
      local_var_path = '/move-task-orders/{moveID}'.sub('{' + 'moveID' + '}', CGI.escape(move_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MoveTaskOrder'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MoveTaskOrderApi.get_move_task_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoveTaskOrderApi#get_move_task_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # listMoves
    # Gets all moves that have been reviewed and approved by the TOO. The `since` parameter can be used to filter this list down to only the moves that have been updated since the provided timestamp. A move will be considered updated if the `updatedAt` timestamp on the move or on its orders, shipments, service items, or payment requests, is later than the provided date and time.  **WIP**: Include what causes moves to leave this list. Currently, once the `availableToPrimeAt` timestamp has been set, that move will always appear in this list. 
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since Only return moves updated since this time. Formatted like \&quot;2021-07-23T18:30:47.116Z\&quot;
    # @return [Array<ListMove>]
    def list_moves(opts = {})
      data, _status_code, _headers = list_moves_with_http_info(opts)
      data
    end

    # listMoves
    # Gets all moves that have been reviewed and approved by the TOO. The &#x60;since&#x60; parameter can be used to filter this list down to only the moves that have been updated since the provided timestamp. A move will be considered updated if the &#x60;updatedAt&#x60; timestamp on the move or on its orders, shipments, service items, or payment requests, is later than the provided date and time.  **WIP**: Include what causes moves to leave this list. Currently, once the &#x60;availableToPrimeAt&#x60; timestamp has been set, that move will always appear in this list. 
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :since Only return moves updated since this time. Formatted like \&quot;2021-07-23T18:30:47.116Z\&quot;
    # @return [Array<(Array<ListMove>, Integer, Hash)>] Array<ListMove> data, response status code and response headers
    def list_moves_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoveTaskOrderApi.list_moves ...'
      end
      # resource path
      local_var_path = '/moves'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListMove>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MoveTaskOrderApi.list_moves",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoveTaskOrderApi#list_moves\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateMTOPostCounselingInformation
    # ### Functionality This endpoint **updates** the MoveTaskOrder to indicate that the Prime has completed Counseling. This update uses the moveTaskOrderID provided in the path, updates the move status and marks child elements of the move to indicate the update. No body object is expected for this request.  **For Full/Partial PPMs**: This action is required so that the customer can start uploading their proof of service docs.  **For other move types**: This action is required for auditing reasons so that we have a record of when the Prime counseled the customer. 
    # @param move_task_order_id [String] ID of move task order to use.
    # @param if_match [String] Optimistic locking is implemented via the &#x60;If-Match&#x60; header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a &#x60;412 Precondition Failed&#x60; error. 
    # @param [Hash] opts the optional parameters
    # @return [MoveTaskOrder]
    def update_mto_post_counseling_information(move_task_order_id, if_match, opts = {})
      data, _status_code, _headers = update_mto_post_counseling_information_with_http_info(move_task_order_id, if_match, opts)
      data
    end

    # updateMTOPostCounselingInformation
    # ### Functionality This endpoint **updates** the MoveTaskOrder to indicate that the Prime has completed Counseling. This update uses the moveTaskOrderID provided in the path, updates the move status and marks child elements of the move to indicate the update. No body object is expected for this request.  **For Full/Partial PPMs**: This action is required so that the customer can start uploading their proof of service docs.  **For other move types**: This action is required for auditing reasons so that we have a record of when the Prime counseled the customer. 
    # @param move_task_order_id [String] ID of move task order to use.
    # @param if_match [String] Optimistic locking is implemented via the &#x60;If-Match&#x60; header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a &#x60;412 Precondition Failed&#x60; error. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MoveTaskOrder, Integer, Hash)>] MoveTaskOrder data, response status code and response headers
    def update_mto_post_counseling_information_with_http_info(move_task_order_id, if_match, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoveTaskOrderApi.update_mto_post_counseling_information ...'
      end
      # verify the required parameter 'move_task_order_id' is set
      if @api_client.config.client_side_validation && move_task_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'move_task_order_id' when calling MoveTaskOrderApi.update_mto_post_counseling_information"
      end
      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling MoveTaskOrderApi.update_mto_post_counseling_information"
      end
      # resource path
      local_var_path = '/move-task-orders/{moveTaskOrderID}/post-counseling-info'.sub('{' + 'moveTaskOrderID' + '}', CGI.escape(move_task_order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MoveTaskOrder'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MoveTaskOrderApi.update_mto_post_counseling_information",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoveTaskOrderApi#update_mto_post_counseling_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
