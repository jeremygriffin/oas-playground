=begin
#MilMove Prime V2 API

#The Prime V2 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v2/`. 

The version of the OpenAPI document: 0.0.1
Contact: milmove-developers@caci.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class MoveTaskOrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # getMoveTaskOrder
    # ### Functionality This endpoint gets an individual MoveTaskOrder by ID.  It will provide information about the Customer and any associated MTOShipments, MTOServiceItems and PaymentRequests.  **NOTE**: New version in v3. Version will return PPM addresses[pickupAddress, destinationAddress, secondaryPickupAddress secondaryDestinationAddress]. PPM postalCodes will be phased out[pickupPostalCode, secondaryPickupPostalCode, destinationPostalCode and secondaryDestinationPostalCode]. 
    # @param move_id [String] UUID or MoveCode of move task order to use.
    # @param [Hash] opts the optional parameters
    # @return [MoveTaskOrder]
    def get_move_task_order(move_id, opts = {})
      data, _status_code, _headers = get_move_task_order_with_http_info(move_id, opts)
      data
    end

    # getMoveTaskOrder
    # ### Functionality This endpoint gets an individual MoveTaskOrder by ID.  It will provide information about the Customer and any associated MTOShipments, MTOServiceItems and PaymentRequests.  **NOTE**: New version in v3. Version will return PPM addresses[pickupAddress, destinationAddress, secondaryPickupAddress secondaryDestinationAddress]. PPM postalCodes will be phased out[pickupPostalCode, secondaryPickupPostalCode, destinationPostalCode and secondaryDestinationPostalCode]. 
    # @param move_id [String] UUID or MoveCode of move task order to use.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MoveTaskOrder, Integer, Hash)>] MoveTaskOrder data, response status code and response headers
    def get_move_task_order_with_http_info(move_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoveTaskOrderApi.get_move_task_order ...'
      end
      # verify the required parameter 'move_id' is set
      if @api_client.config.client_side_validation && move_id.nil?
        fail ArgumentError, "Missing the required parameter 'move_id' when calling MoveTaskOrderApi.get_move_task_order"
      end
      # resource path
      local_var_path = '/move-task-orders/{moveID}'.sub('{' + 'moveID' + '}', CGI.escape(move_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MoveTaskOrder'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MoveTaskOrderApi.get_move_task_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoveTaskOrderApi#get_move_task_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
