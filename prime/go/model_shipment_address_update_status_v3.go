/*
MilMove Prime V3 API

The Prime V3 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v3/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ShipmentAddressUpdateStatusV3 the model 'ShipmentAddressUpdateStatusV3'
type ShipmentAddressUpdateStatusV3 string

// List of ShipmentAddressUpdateStatus
const (
	REQUESTED ShipmentAddressUpdateStatusV3 = "REQUESTED"
	REJECTED ShipmentAddressUpdateStatusV3 = "REJECTED"
	APPROVED ShipmentAddressUpdateStatusV3 = "APPROVED"
)

// All allowed values of ShipmentAddressUpdateStatusV3 enum
var AllowedShipmentAddressUpdateStatusV3EnumValues = []ShipmentAddressUpdateStatusV3{
	"REQUESTED",
	"REJECTED",
	"APPROVED",
}

func (v *ShipmentAddressUpdateStatusV3) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShipmentAddressUpdateStatusV3(value)
	for _, existing := range AllowedShipmentAddressUpdateStatusV3EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShipmentAddressUpdateStatusV3", value)
}

// NewShipmentAddressUpdateStatusV3FromValue returns a pointer to a valid ShipmentAddressUpdateStatusV3
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShipmentAddressUpdateStatusV3FromValue(v string) (*ShipmentAddressUpdateStatusV3, error) {
	ev := ShipmentAddressUpdateStatusV3(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShipmentAddressUpdateStatusV3: valid values are %v", v, AllowedShipmentAddressUpdateStatusV3EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShipmentAddressUpdateStatusV3) IsValid() bool {
	for _, existing := range AllowedShipmentAddressUpdateStatusV3EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShipmentAddressUpdateStatus value
func (v ShipmentAddressUpdateStatusV3) Ptr() *ShipmentAddressUpdateStatusV3 {
	return &v
}

type NullableShipmentAddressUpdateStatusV3 struct {
	value *ShipmentAddressUpdateStatusV3
	isSet bool
}

func (v NullableShipmentAddressUpdateStatusV3) Get() *ShipmentAddressUpdateStatusV3 {
	return v.value
}

func (v *NullableShipmentAddressUpdateStatusV3) Set(val *ShipmentAddressUpdateStatusV3) {
	v.value = val
	v.isSet = true
}

func (v NullableShipmentAddressUpdateStatusV3) IsSet() bool {
	return v.isSet
}

func (v *NullableShipmentAddressUpdateStatusV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipmentAddressUpdateStatusV3(val *ShipmentAddressUpdateStatusV3) *NullableShipmentAddressUpdateStatusV3 {
	return &NullableShipmentAddressUpdateStatusV3{value: val, isSet: true}
}

func (v NullableShipmentAddressUpdateStatusV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipmentAddressUpdateStatusV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

