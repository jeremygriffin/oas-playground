/*
MilMove Prime V3 API

The Prime V3 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v3/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the UploadWithOmissionsV3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadWithOmissionsV3{}

// UploadWithOmissionsV3 An uploaded file.
type UploadWithOmissionsV3 struct {
	Id *string `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
	Filename string `json:"filename"`
	ContentType string `json:"contentType"`
	Bytes int32 `json:"bytes"`
	Status *string `json:"status,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

type _UploadWithOmissionsV3 UploadWithOmissionsV3

// NewUploadWithOmissionsV3 instantiates a new UploadWithOmissionsV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadWithOmissionsV3(filename string, contentType string, bytes int32) *UploadWithOmissionsV3 {
	this := UploadWithOmissionsV3{}
	this.Filename = filename
	this.ContentType = contentType
	this.Bytes = bytes
	return &this
}

// NewUploadWithOmissionsV3WithDefaults instantiates a new UploadWithOmissionsV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadWithOmissionsV3WithDefaults() *UploadWithOmissionsV3 {
	this := UploadWithOmissionsV3{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UploadWithOmissionsV3) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadWithOmissionsV3) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UploadWithOmissionsV3) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UploadWithOmissionsV3) SetId(v string) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UploadWithOmissionsV3) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadWithOmissionsV3) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UploadWithOmissionsV3) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UploadWithOmissionsV3) SetUrl(v string) {
	o.Url = &v
}

// GetFilename returns the Filename field value
func (o *UploadWithOmissionsV3) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *UploadWithOmissionsV3) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *UploadWithOmissionsV3) SetFilename(v string) {
	o.Filename = v
}

// GetContentType returns the ContentType field value
func (o *UploadWithOmissionsV3) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *UploadWithOmissionsV3) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *UploadWithOmissionsV3) SetContentType(v string) {
	o.ContentType = v
}

// GetBytes returns the Bytes field value
func (o *UploadWithOmissionsV3) GetBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value
// and a boolean to check if the value has been set.
func (o *UploadWithOmissionsV3) GetBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bytes, true
}

// SetBytes sets field value
func (o *UploadWithOmissionsV3) SetBytes(v int32) {
	o.Bytes = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UploadWithOmissionsV3) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadWithOmissionsV3) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UploadWithOmissionsV3) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UploadWithOmissionsV3) SetStatus(v string) {
	o.Status = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *UploadWithOmissionsV3) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadWithOmissionsV3) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *UploadWithOmissionsV3) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *UploadWithOmissionsV3) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UploadWithOmissionsV3) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadWithOmissionsV3) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UploadWithOmissionsV3) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *UploadWithOmissionsV3) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o UploadWithOmissionsV3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadWithOmissionsV3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	toSerialize["filename"] = o.Filename
	toSerialize["contentType"] = o.ContentType
	toSerialize["bytes"] = o.Bytes
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *UploadWithOmissionsV3) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filename",
		"contentType",
		"bytes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUploadWithOmissionsV3 := _UploadWithOmissionsV3{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUploadWithOmissionsV3)

	if err != nil {
		return err
	}

	*o = UploadWithOmissionsV3(varUploadWithOmissionsV3)

	return err
}

type NullableUploadWithOmissionsV3 struct {
	value *UploadWithOmissionsV3
	isSet bool
}

func (v NullableUploadWithOmissionsV3) Get() *UploadWithOmissionsV3 {
	return v.value
}

func (v *NullableUploadWithOmissionsV3) Set(val *UploadWithOmissionsV3) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadWithOmissionsV3) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadWithOmissionsV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadWithOmissionsV3(val *UploadWithOmissionsV3) *NullableUploadWithOmissionsV3 {
	return &NullableUploadWithOmissionsV3{value: val, isSet: true}
}

func (v NullableUploadWithOmissionsV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadWithOmissionsV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


