/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ServiceItemParamType the model 'ServiceItemParamType'
type ServiceItemParamType string

// List of ServiceItemParamType
const (
	STRING ServiceItemParamType = "STRING"
	DATE ServiceItemParamType = "DATE"
	INTEGER ServiceItemParamType = "INTEGER"
	DECIMAL ServiceItemParamType = "DECIMAL"
	TIMESTAMP ServiceItemParamType = "TIMESTAMP"
	PAYMENT_SERVICE_ITEM_UUID ServiceItemParamType = "PaymentServiceItemUUID"
	BOOLEAN ServiceItemParamType = "BOOLEAN"
)

// All allowed values of ServiceItemParamType enum
var AllowedServiceItemParamTypeEnumValues = []ServiceItemParamType{
	"STRING",
	"DATE",
	"INTEGER",
	"DECIMAL",
	"TIMESTAMP",
	"PaymentServiceItemUUID",
	"BOOLEAN",
}

func (v *ServiceItemParamType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceItemParamType(value)
	for _, existing := range AllowedServiceItemParamTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceItemParamType", value)
}

// NewServiceItemParamTypeFromValue returns a pointer to a valid ServiceItemParamType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceItemParamTypeFromValue(v string) (*ServiceItemParamType, error) {
	ev := ServiceItemParamType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceItemParamType: valid values are %v", v, AllowedServiceItemParamTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceItemParamType) IsValid() bool {
	for _, existing := range AllowedServiceItemParamTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceItemParamType value
func (v ServiceItemParamType) Ptr() *ServiceItemParamType {
	return &v
}

type NullableServiceItemParamType struct {
	value *ServiceItemParamType
	isSet bool
}

func (v NullableServiceItemParamType) Get() *ServiceItemParamType {
	return v.value
}

func (v *NullableServiceItemParamType) Set(val *ServiceItemParamType) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceItemParamType) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceItemParamType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceItemParamType(val *ServiceItemParamType) *NullableServiceItemParamType {
	return &NullableServiceItemParamType{value: val, isSet: true}
}

func (v NullableServiceItemParamType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceItemParamType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

