/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PPMShipmentStatus Status of the PPM Shipment:   * **DRAFT**: The customer has created the PPM shipment but has not yet submitted their move for counseling.   * **SUBMITTED**: The shipment belongs to a move that has been submitted by the customer or has been created by a Service Counselor or Prime Contractor for a submitted move.   * **WAITING_ON_CUSTOMER**: The PPM shipment has been approved and the customer may now provide their actual move closeout information and documentation required to get paid.   * **NEEDS_ADVANCE_APPROVAL**: The shipment was counseled by the Prime Contractor and approved but an advance was requested so will need further financial approval from the government.   * **NEEDS_CLOSEOUT**: The customer has provided their closeout weight tickets, receipts, and expenses and certified it for the Service Counselor to approve, exclude or reject.   * **CLOSEOUT_COMPLETE**: The Service Counselor has reviewed all of the customer's PPM closeout documentation and authorizes the customer can download and submit their finalized SSW packet. 
type PPMShipmentStatus string

// List of PPMShipmentStatus
const (
	DRAFT PPMShipmentStatus = "DRAFT"
	SUBMITTED PPMShipmentStatus = "SUBMITTED"
	WAITING_ON_CUSTOMER PPMShipmentStatus = "WAITING_ON_CUSTOMER"
	NEEDS_ADVANCE_APPROVAL PPMShipmentStatus = "NEEDS_ADVANCE_APPROVAL"
	NEEDS_CLOSEOUT PPMShipmentStatus = "NEEDS_CLOSEOUT"
	CLOSEOUT_COMPLETE PPMShipmentStatus = "CLOSEOUT_COMPLETE"
)

// All allowed values of PPMShipmentStatus enum
var AllowedPPMShipmentStatusEnumValues = []PPMShipmentStatus{
	"DRAFT",
	"SUBMITTED",
	"WAITING_ON_CUSTOMER",
	"NEEDS_ADVANCE_APPROVAL",
	"NEEDS_CLOSEOUT",
	"CLOSEOUT_COMPLETE",
}

func (v *PPMShipmentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PPMShipmentStatus(value)
	for _, existing := range AllowedPPMShipmentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PPMShipmentStatus", value)
}

// NewPPMShipmentStatusFromValue returns a pointer to a valid PPMShipmentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPPMShipmentStatusFromValue(v string) (*PPMShipmentStatus, error) {
	ev := PPMShipmentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PPMShipmentStatus: valid values are %v", v, AllowedPPMShipmentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PPMShipmentStatus) IsValid() bool {
	for _, existing := range AllowedPPMShipmentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PPMShipmentStatus value
func (v PPMShipmentStatus) Ptr() *PPMShipmentStatus {
	return &v
}

type NullablePPMShipmentStatus struct {
	value *PPMShipmentStatus
	isSet bool
}

func (v NullablePPMShipmentStatus) Get() *PPMShipmentStatus {
	return v.value
}

func (v *NullablePPMShipmentStatus) Set(val *PPMShipmentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePPMShipmentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePPMShipmentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePPMShipmentStatus(val *PPMShipmentStatus) *NullablePPMShipmentStatus {
	return &NullablePPMShipmentStatus{value: val, isSet: true}
}

func (v NullablePPMShipmentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePPMShipmentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

