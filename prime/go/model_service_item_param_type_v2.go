/*
MilMove Prime V2 API

The Prime V2 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v2/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ServiceItemParamTypeV2 the model 'ServiceItemParamTypeV2'
type ServiceItemParamTypeV2 string

// List of ServiceItemParamType
const (
	STRING ServiceItemParamTypeV2 = "STRING"
	DATE ServiceItemParamTypeV2 = "DATE"
	INTEGER ServiceItemParamTypeV2 = "INTEGER"
	DECIMAL ServiceItemParamTypeV2 = "DECIMAL"
	TIMESTAMP ServiceItemParamTypeV2 = "TIMESTAMP"
	PAYMENT_SERVICE_ITEM_UUID ServiceItemParamTypeV2 = "PaymentServiceItemUUID"
	BOOLEAN ServiceItemParamTypeV2 = "BOOLEAN"
)

// All allowed values of ServiceItemParamTypeV2 enum
var AllowedServiceItemParamTypeV2EnumValues = []ServiceItemParamTypeV2{
	"STRING",
	"DATE",
	"INTEGER",
	"DECIMAL",
	"TIMESTAMP",
	"PaymentServiceItemUUID",
	"BOOLEAN",
}

func (v *ServiceItemParamTypeV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceItemParamTypeV2(value)
	for _, existing := range AllowedServiceItemParamTypeV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceItemParamTypeV2", value)
}

// NewServiceItemParamTypeV2FromValue returns a pointer to a valid ServiceItemParamTypeV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceItemParamTypeV2FromValue(v string) (*ServiceItemParamTypeV2, error) {
	ev := ServiceItemParamTypeV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceItemParamTypeV2: valid values are %v", v, AllowedServiceItemParamTypeV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceItemParamTypeV2) IsValid() bool {
	for _, existing := range AllowedServiceItemParamTypeV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceItemParamType value
func (v ServiceItemParamTypeV2) Ptr() *ServiceItemParamTypeV2 {
	return &v
}

type NullableServiceItemParamTypeV2 struct {
	value *ServiceItemParamTypeV2
	isSet bool
}

func (v NullableServiceItemParamTypeV2) Get() *ServiceItemParamTypeV2 {
	return v.value
}

func (v *NullableServiceItemParamTypeV2) Set(val *ServiceItemParamTypeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceItemParamTypeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceItemParamTypeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceItemParamTypeV2(val *ServiceItemParamTypeV2) *NullableServiceItemParamTypeV2 {
	return &NullableServiceItemParamTypeV2{value: val, isSet: true}
}

func (v NullableServiceItemParamTypeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceItemParamTypeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

