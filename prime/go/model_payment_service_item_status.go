/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PaymentServiceItemStatus the model 'PaymentServiceItemStatus'
type PaymentServiceItemStatus string

// List of PaymentServiceItemStatus
const (
	REQUESTED PaymentServiceItemStatus = "REQUESTED"
	APPROVED PaymentServiceItemStatus = "APPROVED"
	DENIED PaymentServiceItemStatus = "DENIED"
	SENT_TO_GEX PaymentServiceItemStatus = "SENT_TO_GEX"
	PAID PaymentServiceItemStatus = "PAID"
	EDI_ERROR PaymentServiceItemStatus = "EDI_ERROR"
)

// All allowed values of PaymentServiceItemStatus enum
var AllowedPaymentServiceItemStatusEnumValues = []PaymentServiceItemStatus{
	"REQUESTED",
	"APPROVED",
	"DENIED",
	"SENT_TO_GEX",
	"PAID",
	"EDI_ERROR",
}

func (v *PaymentServiceItemStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentServiceItemStatus(value)
	for _, existing := range AllowedPaymentServiceItemStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentServiceItemStatus", value)
}

// NewPaymentServiceItemStatusFromValue returns a pointer to a valid PaymentServiceItemStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentServiceItemStatusFromValue(v string) (*PaymentServiceItemStatus, error) {
	ev := PaymentServiceItemStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentServiceItemStatus: valid values are %v", v, AllowedPaymentServiceItemStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentServiceItemStatus) IsValid() bool {
	for _, existing := range AllowedPaymentServiceItemStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentServiceItemStatus value
func (v PaymentServiceItemStatus) Ptr() *PaymentServiceItemStatus {
	return &v
}

type NullablePaymentServiceItemStatus struct {
	value *PaymentServiceItemStatus
	isSet bool
}

func (v NullablePaymentServiceItemStatus) Get() *PaymentServiceItemStatus {
	return v.value
}

func (v *NullablePaymentServiceItemStatus) Set(val *PaymentServiceItemStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentServiceItemStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentServiceItemStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentServiceItemStatus(val *PaymentServiceItemStatus) *NullablePaymentServiceItemStatus {
	return &NullablePaymentServiceItemStatus{value: val, isSet: true}
}

func (v NullablePaymentServiceItemStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentServiceItemStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

