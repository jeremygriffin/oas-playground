/*
MilMove Prime V2 API

The Prime V2 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v2/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PaymentRequestStatusV2 the model 'PaymentRequestStatusV2'
type PaymentRequestStatusV2 string

// List of PaymentRequestStatus
const (
	PENDING PaymentRequestStatusV2 = "PENDING"
	REVIEWED PaymentRequestStatusV2 = "REVIEWED"
	REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED PaymentRequestStatusV2 = "REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED"
	SENT_TO_GEX PaymentRequestStatusV2 = "SENT_TO_GEX"
	RECEIVED_BY_GEX PaymentRequestStatusV2 = "RECEIVED_BY_GEX"
	PAID PaymentRequestStatusV2 = "PAID"
	EDI_ERROR PaymentRequestStatusV2 = "EDI_ERROR"
	DEPRECATED PaymentRequestStatusV2 = "DEPRECATED"
)

// All allowed values of PaymentRequestStatusV2 enum
var AllowedPaymentRequestStatusV2EnumValues = []PaymentRequestStatusV2{
	"PENDING",
	"REVIEWED",
	"REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED",
	"SENT_TO_GEX",
	"RECEIVED_BY_GEX",
	"PAID",
	"EDI_ERROR",
	"DEPRECATED",
}

func (v *PaymentRequestStatusV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentRequestStatusV2(value)
	for _, existing := range AllowedPaymentRequestStatusV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentRequestStatusV2", value)
}

// NewPaymentRequestStatusV2FromValue returns a pointer to a valid PaymentRequestStatusV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentRequestStatusV2FromValue(v string) (*PaymentRequestStatusV2, error) {
	ev := PaymentRequestStatusV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentRequestStatusV2: valid values are %v", v, AllowedPaymentRequestStatusV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentRequestStatusV2) IsValid() bool {
	for _, existing := range AllowedPaymentRequestStatusV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentRequestStatus value
func (v PaymentRequestStatusV2) Ptr() *PaymentRequestStatusV2 {
	return &v
}

type NullablePaymentRequestStatusV2 struct {
	value *PaymentRequestStatusV2
	isSet bool
}

func (v NullablePaymentRequestStatusV2) Get() *PaymentRequestStatusV2 {
	return v.value
}

func (v *NullablePaymentRequestStatusV2) Set(val *PaymentRequestStatusV2) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentRequestStatusV2) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentRequestStatusV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentRequestStatusV2(val *PaymentRequestStatusV2) *NullablePaymentRequestStatusV2 {
	return &NullablePaymentRequestStatusV2{value: val, isSet: true}
}

func (v NullablePaymentRequestStatusV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentRequestStatusV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

