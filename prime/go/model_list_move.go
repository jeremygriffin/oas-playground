/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ListMove type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListMove{}

// ListMove An abbreviated definition for a move, without all the nested information (shipments, service items, etc). Used to fetch a list of moves more efficiently. 
type ListMove struct {
	Id *string `json:"id,omitempty"`
	MoveCode *string `json:"moveCode,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	OrderID *string `json:"orderID,omitempty"`
	ReferenceId *string `json:"referenceId,omitempty"`
	AvailableToPrimeAt NullableTime `json:"availableToPrimeAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	PpmType *string `json:"ppmType,omitempty"`
	ETag *string `json:"eTag,omitempty"`
	Amendments *Amendments `json:"amendments,omitempty"`
}

// NewListMove instantiates a new ListMove object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListMove() *ListMove {
	this := ListMove{}
	return &this
}

// NewListMoveWithDefaults instantiates a new ListMove object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListMoveWithDefaults() *ListMove {
	this := ListMove{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ListMove) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMove) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ListMove) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ListMove) SetId(v string) {
	o.Id = &v
}

// GetMoveCode returns the MoveCode field value if set, zero value otherwise.
func (o *ListMove) GetMoveCode() string {
	if o == nil || IsNil(o.MoveCode) {
		var ret string
		return ret
	}
	return *o.MoveCode
}

// GetMoveCodeOk returns a tuple with the MoveCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMove) GetMoveCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MoveCode) {
		return nil, false
	}
	return o.MoveCode, true
}

// HasMoveCode returns a boolean if a field has been set.
func (o *ListMove) HasMoveCode() bool {
	if o != nil && !IsNil(o.MoveCode) {
		return true
	}

	return false
}

// SetMoveCode gets a reference to the given string and assigns it to the MoveCode field.
func (o *ListMove) SetMoveCode(v string) {
	o.MoveCode = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ListMove) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMove) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ListMove) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ListMove) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetOrderID returns the OrderID field value if set, zero value otherwise.
func (o *ListMove) GetOrderID() string {
	if o == nil || IsNil(o.OrderID) {
		var ret string
		return ret
	}
	return *o.OrderID
}

// GetOrderIDOk returns a tuple with the OrderID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMove) GetOrderIDOk() (*string, bool) {
	if o == nil || IsNil(o.OrderID) {
		return nil, false
	}
	return o.OrderID, true
}

// HasOrderID returns a boolean if a field has been set.
func (o *ListMove) HasOrderID() bool {
	if o != nil && !IsNil(o.OrderID) {
		return true
	}

	return false
}

// SetOrderID gets a reference to the given string and assigns it to the OrderID field.
func (o *ListMove) SetOrderID(v string) {
	o.OrderID = &v
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *ListMove) GetReferenceId() string {
	if o == nil || IsNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMove) GetReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *ListMove) HasReferenceId() bool {
	if o != nil && !IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *ListMove) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetAvailableToPrimeAt returns the AvailableToPrimeAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListMove) GetAvailableToPrimeAt() time.Time {
	if o == nil || IsNil(o.AvailableToPrimeAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.AvailableToPrimeAt.Get()
}

// GetAvailableToPrimeAtOk returns a tuple with the AvailableToPrimeAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListMove) GetAvailableToPrimeAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailableToPrimeAt.Get(), o.AvailableToPrimeAt.IsSet()
}

// HasAvailableToPrimeAt returns a boolean if a field has been set.
func (o *ListMove) HasAvailableToPrimeAt() bool {
	if o != nil && o.AvailableToPrimeAt.IsSet() {
		return true
	}

	return false
}

// SetAvailableToPrimeAt gets a reference to the given NullableTime and assigns it to the AvailableToPrimeAt field.
func (o *ListMove) SetAvailableToPrimeAt(v time.Time) {
	o.AvailableToPrimeAt.Set(&v)
}
// SetAvailableToPrimeAtNil sets the value for AvailableToPrimeAt to be an explicit nil
func (o *ListMove) SetAvailableToPrimeAtNil() {
	o.AvailableToPrimeAt.Set(nil)
}

// UnsetAvailableToPrimeAt ensures that no value is present for AvailableToPrimeAt, not even an explicit nil
func (o *ListMove) UnsetAvailableToPrimeAt() {
	o.AvailableToPrimeAt.Unset()
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ListMove) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMove) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ListMove) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ListMove) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetPpmType returns the PpmType field value if set, zero value otherwise.
func (o *ListMove) GetPpmType() string {
	if o == nil || IsNil(o.PpmType) {
		var ret string
		return ret
	}
	return *o.PpmType
}

// GetPpmTypeOk returns a tuple with the PpmType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMove) GetPpmTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PpmType) {
		return nil, false
	}
	return o.PpmType, true
}

// HasPpmType returns a boolean if a field has been set.
func (o *ListMove) HasPpmType() bool {
	if o != nil && !IsNil(o.PpmType) {
		return true
	}

	return false
}

// SetPpmType gets a reference to the given string and assigns it to the PpmType field.
func (o *ListMove) SetPpmType(v string) {
	o.PpmType = &v
}

// GetETag returns the ETag field value if set, zero value otherwise.
func (o *ListMove) GetETag() string {
	if o == nil || IsNil(o.ETag) {
		var ret string
		return ret
	}
	return *o.ETag
}

// GetETagOk returns a tuple with the ETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMove) GetETagOk() (*string, bool) {
	if o == nil || IsNil(o.ETag) {
		return nil, false
	}
	return o.ETag, true
}

// HasETag returns a boolean if a field has been set.
func (o *ListMove) HasETag() bool {
	if o != nil && !IsNil(o.ETag) {
		return true
	}

	return false
}

// SetETag gets a reference to the given string and assigns it to the ETag field.
func (o *ListMove) SetETag(v string) {
	o.ETag = &v
}

// GetAmendments returns the Amendments field value if set, zero value otherwise.
func (o *ListMove) GetAmendments() Amendments {
	if o == nil || IsNil(o.Amendments) {
		var ret Amendments
		return ret
	}
	return *o.Amendments
}

// GetAmendmentsOk returns a tuple with the Amendments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMove) GetAmendmentsOk() (*Amendments, bool) {
	if o == nil || IsNil(o.Amendments) {
		return nil, false
	}
	return o.Amendments, true
}

// HasAmendments returns a boolean if a field has been set.
func (o *ListMove) HasAmendments() bool {
	if o != nil && !IsNil(o.Amendments) {
		return true
	}

	return false
}

// SetAmendments gets a reference to the given Amendments and assigns it to the Amendments field.
func (o *ListMove) SetAmendments(v Amendments) {
	o.Amendments = &v
}

func (o ListMove) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListMove) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MoveCode) {
		toSerialize["moveCode"] = o.MoveCode
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.OrderID) {
		toSerialize["orderID"] = o.OrderID
	}
	if !IsNil(o.ReferenceId) {
		toSerialize["referenceId"] = o.ReferenceId
	}
	if o.AvailableToPrimeAt.IsSet() {
		toSerialize["availableToPrimeAt"] = o.AvailableToPrimeAt.Get()
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.PpmType) {
		toSerialize["ppmType"] = o.PpmType
	}
	if !IsNil(o.ETag) {
		toSerialize["eTag"] = o.ETag
	}
	if !IsNil(o.Amendments) {
		toSerialize["amendments"] = o.Amendments
	}
	return toSerialize, nil
}

type NullableListMove struct {
	value *ListMove
	isSet bool
}

func (v NullableListMove) Get() *ListMove {
	return v.value
}

func (v *NullableListMove) Set(val *ListMove) {
	v.value = val
	v.isSet = true
}

func (v NullableListMove) IsSet() bool {
	return v.isSet
}

func (v *NullableListMove) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMove(val *ListMove) *NullableListMove {
	return &NullableListMove{value: val, isSet: true}
}

func (v NullableListMove) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMove) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


