/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ServiceRequestDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceRequestDocument{}

// ServiceRequestDocument struct for ServiceRequestDocument
type ServiceRequestDocument struct {
	Uploads []UploadWithOmissions `json:"uploads,omitempty"`
}

// NewServiceRequestDocument instantiates a new ServiceRequestDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceRequestDocument() *ServiceRequestDocument {
	this := ServiceRequestDocument{}
	return &this
}

// NewServiceRequestDocumentWithDefaults instantiates a new ServiceRequestDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceRequestDocumentWithDefaults() *ServiceRequestDocument {
	this := ServiceRequestDocument{}
	return &this
}

// GetUploads returns the Uploads field value if set, zero value otherwise.
func (o *ServiceRequestDocument) GetUploads() []UploadWithOmissions {
	if o == nil || IsNil(o.Uploads) {
		var ret []UploadWithOmissions
		return ret
	}
	return o.Uploads
}

// GetUploadsOk returns a tuple with the Uploads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceRequestDocument) GetUploadsOk() ([]UploadWithOmissions, bool) {
	if o == nil || IsNil(o.Uploads) {
		return nil, false
	}
	return o.Uploads, true
}

// HasUploads returns a boolean if a field has been set.
func (o *ServiceRequestDocument) HasUploads() bool {
	if o != nil && !IsNil(o.Uploads) {
		return true
	}

	return false
}

// SetUploads gets a reference to the given []UploadWithOmissions and assigns it to the Uploads field.
func (o *ServiceRequestDocument) SetUploads(v []UploadWithOmissions) {
	o.Uploads = v
}

func (o ServiceRequestDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceRequestDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uploads) {
		toSerialize["uploads"] = o.Uploads
	}
	return toSerialize, nil
}

type NullableServiceRequestDocument struct {
	value *ServiceRequestDocument
	isSet bool
}

func (v NullableServiceRequestDocument) Get() *ServiceRequestDocument {
	return v.value
}

func (v *NullableServiceRequestDocument) Set(val *ServiceRequestDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceRequestDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceRequestDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceRequestDocument(val *ServiceRequestDocument) *NullableServiceRequestDocument {
	return &NullableServiceRequestDocument{value: val, isSet: true}
}

func (v NullableServiceRequestDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceRequestDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


