/*
MilMove Prime V3 API

The Prime V3 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v3/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MTOServiceItemStatusV3 The status of a service item, indicating where it is in the TOO's approval process.
type MTOServiceItemStatusV3 string

// List of MTOServiceItemStatus
const (
	SUBMITTED MTOServiceItemStatusV3 = "SUBMITTED"
	APPROVED MTOServiceItemStatusV3 = "APPROVED"
	REJECTED MTOServiceItemStatusV3 = "REJECTED"
)

// All allowed values of MTOServiceItemStatusV3 enum
var AllowedMTOServiceItemStatusV3EnumValues = []MTOServiceItemStatusV3{
	"SUBMITTED",
	"APPROVED",
	"REJECTED",
}

func (v *MTOServiceItemStatusV3) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MTOServiceItemStatusV3(value)
	for _, existing := range AllowedMTOServiceItemStatusV3EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MTOServiceItemStatusV3", value)
}

// NewMTOServiceItemStatusV3FromValue returns a pointer to a valid MTOServiceItemStatusV3
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMTOServiceItemStatusV3FromValue(v string) (*MTOServiceItemStatusV3, error) {
	ev := MTOServiceItemStatusV3(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MTOServiceItemStatusV3: valid values are %v", v, AllowedMTOServiceItemStatusV3EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MTOServiceItemStatusV3) IsValid() bool {
	for _, existing := range AllowedMTOServiceItemStatusV3EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MTOServiceItemStatus value
func (v MTOServiceItemStatusV3) Ptr() *MTOServiceItemStatusV3 {
	return &v
}

type NullableMTOServiceItemStatusV3 struct {
	value *MTOServiceItemStatusV3
	isSet bool
}

func (v NullableMTOServiceItemStatusV3) Get() *MTOServiceItemStatusV3 {
	return v.value
}

func (v *NullableMTOServiceItemStatusV3) Set(val *MTOServiceItemStatusV3) {
	v.value = val
	v.isSet = true
}

func (v NullableMTOServiceItemStatusV3) IsSet() bool {
	return v.isSet
}

func (v *NullableMTOServiceItemStatusV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMTOServiceItemStatusV3(val *MTOServiceItemStatusV3) *NullableMTOServiceItemStatusV3 {
	return &NullableMTOServiceItemStatusV3{value: val, isSet: true}
}

func (v NullableMTOServiceItemStatusV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMTOServiceItemStatusV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

