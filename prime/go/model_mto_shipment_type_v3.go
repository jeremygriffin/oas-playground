/*
MilMove Prime V3 API

The Prime V3 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v3/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MTOShipmentTypeV3 The type of shipment.   * `HHG` = Household goods move   * `HHG_INTO_NTS_DOMESTIC` = HHG into Non-temporary storage (NTS)   * `HHG_OUTOF_NTS_DOMESTIC` = HHG out of Non-temporary storage (NTS Release)   * `PPM` = Personally Procured Move also known as Do It Yourself (DITY) 
type MTOShipmentTypeV3 string

// List of MTOShipmentType
const (
	BOAT_HAUL_AWAY MTOShipmentTypeV3 = "BOAT_HAUL_AWAY"
	BOAT_TOW_AWAY MTOShipmentTypeV3 = "BOAT_TOW_AWAY"
	HHG MTOShipmentTypeV3 = "HHG"
	HHG_INTO_NTS_DOMESTIC MTOShipmentTypeV3 = "HHG_INTO_NTS_DOMESTIC"
	HHG_OUTOF_NTS_DOMESTIC MTOShipmentTypeV3 = "HHG_OUTOF_NTS_DOMESTIC"
	INTERNATIONAL_HHG MTOShipmentTypeV3 = "INTERNATIONAL_HHG"
	INTERNATIONAL_UB MTOShipmentTypeV3 = "INTERNATIONAL_UB"
	MOTORHOME MTOShipmentTypeV3 = "MOTORHOME"
	PPM MTOShipmentTypeV3 = "PPM"
)

// All allowed values of MTOShipmentTypeV3 enum
var AllowedMTOShipmentTypeV3EnumValues = []MTOShipmentTypeV3{
	"BOAT_HAUL_AWAY",
	"BOAT_TOW_AWAY",
	"HHG",
	"HHG_INTO_NTS_DOMESTIC",
	"HHG_OUTOF_NTS_DOMESTIC",
	"INTERNATIONAL_HHG",
	"INTERNATIONAL_UB",
	"MOTORHOME",
	"PPM",
}

func (v *MTOShipmentTypeV3) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MTOShipmentTypeV3(value)
	for _, existing := range AllowedMTOShipmentTypeV3EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MTOShipmentTypeV3", value)
}

// NewMTOShipmentTypeV3FromValue returns a pointer to a valid MTOShipmentTypeV3
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMTOShipmentTypeV3FromValue(v string) (*MTOShipmentTypeV3, error) {
	ev := MTOShipmentTypeV3(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MTOShipmentTypeV3: valid values are %v", v, AllowedMTOShipmentTypeV3EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MTOShipmentTypeV3) IsValid() bool {
	for _, existing := range AllowedMTOShipmentTypeV3EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MTOShipmentType value
func (v MTOShipmentTypeV3) Ptr() *MTOShipmentTypeV3 {
	return &v
}

type NullableMTOShipmentTypeV3 struct {
	value *MTOShipmentTypeV3
	isSet bool
}

func (v NullableMTOShipmentTypeV3) Get() *MTOShipmentTypeV3 {
	return v.value
}

func (v *NullableMTOShipmentTypeV3) Set(val *MTOShipmentTypeV3) {
	v.value = val
	v.isSet = true
}

func (v NullableMTOShipmentTypeV3) IsSet() bool {
	return v.isSet
}

func (v *NullableMTOShipmentTypeV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMTOShipmentTypeV3(val *MTOShipmentTypeV3) *NullableMTOShipmentTypeV3 {
	return &NullableMTOShipmentTypeV3{value: val, isSet: true}
}

func (v NullableMTOShipmentTypeV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMTOShipmentTypeV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

