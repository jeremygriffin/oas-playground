/*
MilMove Prime V2 API

The Prime V2 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v2/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReServiceCodeV2 This is the full list of service items that can be found on a shipment. Not all service items may be requested by the Prime, but may be returned in a response.  Documentation of all the service items will be provided. 
type ReServiceCodeV2 string

// List of ReServiceCode
const (
	CS ReServiceCodeV2 = "CS"
	DBHF ReServiceCodeV2 = "DBHF"
	DBTF ReServiceCodeV2 = "DBTF"
	DCRT ReServiceCodeV2 = "DCRT"
	DDASIT ReServiceCodeV2 = "DDASIT"
	DDDSIT ReServiceCodeV2 = "DDDSIT"
	DDFSIT ReServiceCodeV2 = "DDFSIT"
	DDP ReServiceCodeV2 = "DDP"
	DDSHUT ReServiceCodeV2 = "DDSHUT"
	DLH ReServiceCodeV2 = "DLH"
	DMHF ReServiceCodeV2 = "DMHF"
	DNPK ReServiceCodeV2 = "DNPK"
	DOASIT ReServiceCodeV2 = "DOASIT"
	DOFSIT ReServiceCodeV2 = "DOFSIT"
	DOP ReServiceCodeV2 = "DOP"
	DOPSIT ReServiceCodeV2 = "DOPSIT"
	DOSHUT ReServiceCodeV2 = "DOSHUT"
	DPK ReServiceCodeV2 = "DPK"
	DSH ReServiceCodeV2 = "DSH"
	DUCRT ReServiceCodeV2 = "DUCRT"
	DUPK ReServiceCodeV2 = "DUPK"
	FSC ReServiceCodeV2 = "FSC"
	IBHF ReServiceCodeV2 = "IBHF"
	IBTF ReServiceCodeV2 = "IBTF"
	ICOLH ReServiceCodeV2 = "ICOLH"
	ICOUB ReServiceCodeV2 = "ICOUB"
	ICRT ReServiceCodeV2 = "ICRT"
	ICRTSA ReServiceCodeV2 = "ICRTSA"
	IDASIT ReServiceCodeV2 = "IDASIT"
	IDDSIT ReServiceCodeV2 = "IDDSIT"
	IDFSIT ReServiceCodeV2 = "IDFSIT"
	IDSHUT ReServiceCodeV2 = "IDSHUT"
	IHPK ReServiceCodeV2 = "IHPK"
	IHUPK ReServiceCodeV2 = "IHUPK"
	INPK ReServiceCodeV2 = "INPK"
	IOASIT ReServiceCodeV2 = "IOASIT"
	IOCLH ReServiceCodeV2 = "IOCLH"
	IOCUB ReServiceCodeV2 = "IOCUB"
	IOFSIT ReServiceCodeV2 = "IOFSIT"
	IOOLH ReServiceCodeV2 = "IOOLH"
	IOOUB ReServiceCodeV2 = "IOOUB"
	IOPSIT ReServiceCodeV2 = "IOPSIT"
	IOSHUT ReServiceCodeV2 = "IOSHUT"
	IUBPK ReServiceCodeV2 = "IUBPK"
	IUBUPK ReServiceCodeV2 = "IUBUPK"
	IUCRT ReServiceCodeV2 = "IUCRT"
	MS ReServiceCodeV2 = "MS"
	NSTH ReServiceCodeV2 = "NSTH"
	NSTUB ReServiceCodeV2 = "NSTUB"
)

// All allowed values of ReServiceCodeV2 enum
var AllowedReServiceCodeV2EnumValues = []ReServiceCodeV2{
	"CS",
	"DBHF",
	"DBTF",
	"DCRT",
	"DDASIT",
	"DDDSIT",
	"DDFSIT",
	"DDP",
	"DDSHUT",
	"DLH",
	"DMHF",
	"DNPK",
	"DOASIT",
	"DOFSIT",
	"DOP",
	"DOPSIT",
	"DOSHUT",
	"DPK",
	"DSH",
	"DUCRT",
	"DUPK",
	"FSC",
	"IBHF",
	"IBTF",
	"ICOLH",
	"ICOUB",
	"ICRT",
	"ICRTSA",
	"IDASIT",
	"IDDSIT",
	"IDFSIT",
	"IDSHUT",
	"IHPK",
	"IHUPK",
	"INPK",
	"IOASIT",
	"IOCLH",
	"IOCUB",
	"IOFSIT",
	"IOOLH",
	"IOOUB",
	"IOPSIT",
	"IOSHUT",
	"IUBPK",
	"IUBUPK",
	"IUCRT",
	"MS",
	"NSTH",
	"NSTUB",
}

func (v *ReServiceCodeV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReServiceCodeV2(value)
	for _, existing := range AllowedReServiceCodeV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReServiceCodeV2", value)
}

// NewReServiceCodeV2FromValue returns a pointer to a valid ReServiceCodeV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReServiceCodeV2FromValue(v string) (*ReServiceCodeV2, error) {
	ev := ReServiceCodeV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReServiceCodeV2: valid values are %v", v, AllowedReServiceCodeV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReServiceCodeV2) IsValid() bool {
	for _, existing := range AllowedReServiceCodeV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReServiceCode value
func (v ReServiceCodeV2) Ptr() *ReServiceCodeV2 {
	return &v
}

type NullableReServiceCodeV2 struct {
	value *ReServiceCodeV2
	isSet bool
}

func (v NullableReServiceCodeV2) Get() *ReServiceCodeV2 {
	return v.value
}

func (v *NullableReServiceCodeV2) Set(val *ReServiceCodeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableReServiceCodeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableReServiceCodeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReServiceCodeV2(val *ReServiceCodeV2) *NullableReServiceCodeV2 {
	return &NullableReServiceCodeV2{value: val, isSet: true}
}

func (v NullableReServiceCodeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReServiceCodeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

