/*
MilMove Prime API

The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Reweigh type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reweigh{}

// Reweigh A reweigh  is when a shipment is weighed for a second time due to the request of a customer, the contractor, system or TOO.
type Reweigh struct {
	Id *string `json:"id,omitempty"`
	RequestedAt *time.Time `json:"requestedAt,omitempty"`
	RequestedBy *ReweighRequester `json:"requestedBy,omitempty"`
	VerificationProvidedAt NullableTime `json:"verificationProvidedAt,omitempty"`
	VerificationReason NullableString `json:"verificationReason,omitempty"`
	Weight NullableInt32 `json:"weight,omitempty"`
	ShipmentID *string `json:"shipmentID,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	ETag *string `json:"eTag,omitempty"`
}

// NewReweigh instantiates a new Reweigh object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReweigh() *Reweigh {
	this := Reweigh{}
	return &this
}

// NewReweighWithDefaults instantiates a new Reweigh object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReweighWithDefaults() *Reweigh {
	this := Reweigh{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Reweigh) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reweigh) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Reweigh) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Reweigh) SetId(v string) {
	o.Id = &v
}

// GetRequestedAt returns the RequestedAt field value if set, zero value otherwise.
func (o *Reweigh) GetRequestedAt() time.Time {
	if o == nil || IsNil(o.RequestedAt) {
		var ret time.Time
		return ret
	}
	return *o.RequestedAt
}

// GetRequestedAtOk returns a tuple with the RequestedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reweigh) GetRequestedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RequestedAt) {
		return nil, false
	}
	return o.RequestedAt, true
}

// HasRequestedAt returns a boolean if a field has been set.
func (o *Reweigh) HasRequestedAt() bool {
	if o != nil && !IsNil(o.RequestedAt) {
		return true
	}

	return false
}

// SetRequestedAt gets a reference to the given time.Time and assigns it to the RequestedAt field.
func (o *Reweigh) SetRequestedAt(v time.Time) {
	o.RequestedAt = &v
}

// GetRequestedBy returns the RequestedBy field value if set, zero value otherwise.
func (o *Reweigh) GetRequestedBy() ReweighRequester {
	if o == nil || IsNil(o.RequestedBy) {
		var ret ReweighRequester
		return ret
	}
	return *o.RequestedBy
}

// GetRequestedByOk returns a tuple with the RequestedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reweigh) GetRequestedByOk() (*ReweighRequester, bool) {
	if o == nil || IsNil(o.RequestedBy) {
		return nil, false
	}
	return o.RequestedBy, true
}

// HasRequestedBy returns a boolean if a field has been set.
func (o *Reweigh) HasRequestedBy() bool {
	if o != nil && !IsNil(o.RequestedBy) {
		return true
	}

	return false
}

// SetRequestedBy gets a reference to the given ReweighRequester and assigns it to the RequestedBy field.
func (o *Reweigh) SetRequestedBy(v ReweighRequester) {
	o.RequestedBy = &v
}

// GetVerificationProvidedAt returns the VerificationProvidedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Reweigh) GetVerificationProvidedAt() time.Time {
	if o == nil || IsNil(o.VerificationProvidedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.VerificationProvidedAt.Get()
}

// GetVerificationProvidedAtOk returns a tuple with the VerificationProvidedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Reweigh) GetVerificationProvidedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.VerificationProvidedAt.Get(), o.VerificationProvidedAt.IsSet()
}

// HasVerificationProvidedAt returns a boolean if a field has been set.
func (o *Reweigh) HasVerificationProvidedAt() bool {
	if o != nil && o.VerificationProvidedAt.IsSet() {
		return true
	}

	return false
}

// SetVerificationProvidedAt gets a reference to the given NullableTime and assigns it to the VerificationProvidedAt field.
func (o *Reweigh) SetVerificationProvidedAt(v time.Time) {
	o.VerificationProvidedAt.Set(&v)
}
// SetVerificationProvidedAtNil sets the value for VerificationProvidedAt to be an explicit nil
func (o *Reweigh) SetVerificationProvidedAtNil() {
	o.VerificationProvidedAt.Set(nil)
}

// UnsetVerificationProvidedAt ensures that no value is present for VerificationProvidedAt, not even an explicit nil
func (o *Reweigh) UnsetVerificationProvidedAt() {
	o.VerificationProvidedAt.Unset()
}

// GetVerificationReason returns the VerificationReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Reweigh) GetVerificationReason() string {
	if o == nil || IsNil(o.VerificationReason.Get()) {
		var ret string
		return ret
	}
	return *o.VerificationReason.Get()
}

// GetVerificationReasonOk returns a tuple with the VerificationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Reweigh) GetVerificationReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VerificationReason.Get(), o.VerificationReason.IsSet()
}

// HasVerificationReason returns a boolean if a field has been set.
func (o *Reweigh) HasVerificationReason() bool {
	if o != nil && o.VerificationReason.IsSet() {
		return true
	}

	return false
}

// SetVerificationReason gets a reference to the given NullableString and assigns it to the VerificationReason field.
func (o *Reweigh) SetVerificationReason(v string) {
	o.VerificationReason.Set(&v)
}
// SetVerificationReasonNil sets the value for VerificationReason to be an explicit nil
func (o *Reweigh) SetVerificationReasonNil() {
	o.VerificationReason.Set(nil)
}

// UnsetVerificationReason ensures that no value is present for VerificationReason, not even an explicit nil
func (o *Reweigh) UnsetVerificationReason() {
	o.VerificationReason.Unset()
}

// GetWeight returns the Weight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Reweigh) GetWeight() int32 {
	if o == nil || IsNil(o.Weight.Get()) {
		var ret int32
		return ret
	}
	return *o.Weight.Get()
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Reweigh) GetWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weight.Get(), o.Weight.IsSet()
}

// HasWeight returns a boolean if a field has been set.
func (o *Reweigh) HasWeight() bool {
	if o != nil && o.Weight.IsSet() {
		return true
	}

	return false
}

// SetWeight gets a reference to the given NullableInt32 and assigns it to the Weight field.
func (o *Reweigh) SetWeight(v int32) {
	o.Weight.Set(&v)
}
// SetWeightNil sets the value for Weight to be an explicit nil
func (o *Reweigh) SetWeightNil() {
	o.Weight.Set(nil)
}

// UnsetWeight ensures that no value is present for Weight, not even an explicit nil
func (o *Reweigh) UnsetWeight() {
	o.Weight.Unset()
}

// GetShipmentID returns the ShipmentID field value if set, zero value otherwise.
func (o *Reweigh) GetShipmentID() string {
	if o == nil || IsNil(o.ShipmentID) {
		var ret string
		return ret
	}
	return *o.ShipmentID
}

// GetShipmentIDOk returns a tuple with the ShipmentID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reweigh) GetShipmentIDOk() (*string, bool) {
	if o == nil || IsNil(o.ShipmentID) {
		return nil, false
	}
	return o.ShipmentID, true
}

// HasShipmentID returns a boolean if a field has been set.
func (o *Reweigh) HasShipmentID() bool {
	if o != nil && !IsNil(o.ShipmentID) {
		return true
	}

	return false
}

// SetShipmentID gets a reference to the given string and assigns it to the ShipmentID field.
func (o *Reweigh) SetShipmentID(v string) {
	o.ShipmentID = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Reweigh) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reweigh) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Reweigh) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Reweigh) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Reweigh) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reweigh) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Reweigh) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Reweigh) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetETag returns the ETag field value if set, zero value otherwise.
func (o *Reweigh) GetETag() string {
	if o == nil || IsNil(o.ETag) {
		var ret string
		return ret
	}
	return *o.ETag
}

// GetETagOk returns a tuple with the ETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reweigh) GetETagOk() (*string, bool) {
	if o == nil || IsNil(o.ETag) {
		return nil, false
	}
	return o.ETag, true
}

// HasETag returns a boolean if a field has been set.
func (o *Reweigh) HasETag() bool {
	if o != nil && !IsNil(o.ETag) {
		return true
	}

	return false
}

// SetETag gets a reference to the given string and assigns it to the ETag field.
func (o *Reweigh) SetETag(v string) {
	o.ETag = &v
}

func (o Reweigh) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reweigh) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RequestedAt) {
		toSerialize["requestedAt"] = o.RequestedAt
	}
	if !IsNil(o.RequestedBy) {
		toSerialize["requestedBy"] = o.RequestedBy
	}
	if o.VerificationProvidedAt.IsSet() {
		toSerialize["verificationProvidedAt"] = o.VerificationProvidedAt.Get()
	}
	if o.VerificationReason.IsSet() {
		toSerialize["verificationReason"] = o.VerificationReason.Get()
	}
	if o.Weight.IsSet() {
		toSerialize["weight"] = o.Weight.Get()
	}
	if !IsNil(o.ShipmentID) {
		toSerialize["shipmentID"] = o.ShipmentID
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.ETag) {
		toSerialize["eTag"] = o.ETag
	}
	return toSerialize, nil
}

type NullableReweigh struct {
	value *Reweigh
	isSet bool
}

func (v NullableReweigh) Get() *Reweigh {
	return v.value
}

func (v *NullableReweigh) Set(val *Reweigh) {
	v.value = val
	v.isSet = true
}

func (v NullableReweigh) IsSet() bool {
	return v.isSet
}

func (v *NullableReweigh) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReweigh(val *Reweigh) *NullableReweigh {
	return &NullableReweigh{value: val, isSet: true}
}

func (v NullableReweigh) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReweigh) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


