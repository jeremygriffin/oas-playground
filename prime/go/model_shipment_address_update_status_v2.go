/*
MilMove Prime V2 API

The Prime V2 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v2/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ShipmentAddressUpdateStatusV2 the model 'ShipmentAddressUpdateStatusV2'
type ShipmentAddressUpdateStatusV2 string

// List of ShipmentAddressUpdateStatus
const (
	REQUESTED ShipmentAddressUpdateStatusV2 = "REQUESTED"
	REJECTED ShipmentAddressUpdateStatusV2 = "REJECTED"
	APPROVED ShipmentAddressUpdateStatusV2 = "APPROVED"
)

// All allowed values of ShipmentAddressUpdateStatusV2 enum
var AllowedShipmentAddressUpdateStatusV2EnumValues = []ShipmentAddressUpdateStatusV2{
	"REQUESTED",
	"REJECTED",
	"APPROVED",
}

func (v *ShipmentAddressUpdateStatusV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShipmentAddressUpdateStatusV2(value)
	for _, existing := range AllowedShipmentAddressUpdateStatusV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShipmentAddressUpdateStatusV2", value)
}

// NewShipmentAddressUpdateStatusV2FromValue returns a pointer to a valid ShipmentAddressUpdateStatusV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShipmentAddressUpdateStatusV2FromValue(v string) (*ShipmentAddressUpdateStatusV2, error) {
	ev := ShipmentAddressUpdateStatusV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShipmentAddressUpdateStatusV2: valid values are %v", v, AllowedShipmentAddressUpdateStatusV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShipmentAddressUpdateStatusV2) IsValid() bool {
	for _, existing := range AllowedShipmentAddressUpdateStatusV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShipmentAddressUpdateStatus value
func (v ShipmentAddressUpdateStatusV2) Ptr() *ShipmentAddressUpdateStatusV2 {
	return &v
}

type NullableShipmentAddressUpdateStatusV2 struct {
	value *ShipmentAddressUpdateStatusV2
	isSet bool
}

func (v NullableShipmentAddressUpdateStatusV2) Get() *ShipmentAddressUpdateStatusV2 {
	return v.value
}

func (v *NullableShipmentAddressUpdateStatusV2) Set(val *ShipmentAddressUpdateStatusV2) {
	v.value = val
	v.isSet = true
}

func (v NullableShipmentAddressUpdateStatusV2) IsSet() bool {
	return v.isSet
}

func (v *NullableShipmentAddressUpdateStatusV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipmentAddressUpdateStatusV2(val *ShipmentAddressUpdateStatusV2) *NullableShipmentAddressUpdateStatusV2 {
	return &NullableShipmentAddressUpdateStatusV2{value: val, isSet: true}
}

func (v NullableShipmentAddressUpdateStatusV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipmentAddressUpdateStatusV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

