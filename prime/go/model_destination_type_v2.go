/*
MilMove Prime V2 API

The Prime V2 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v2/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DestinationTypeV2 the model 'DestinationTypeV2'
type DestinationTypeV2 string

// List of DestinationType
const (
	HOME_OF_RECORD DestinationTypeV2 = "HOME_OF_RECORD"
	HOME_OF_SELECTION DestinationTypeV2 = "HOME_OF_SELECTION"
	PLACE_ENTERED_ACTIVE_DUTY DestinationTypeV2 = "PLACE_ENTERED_ACTIVE_DUTY"
	OTHER_THAN_AUTHORIZED DestinationTypeV2 = "OTHER_THAN_AUTHORIZED"
)

// All allowed values of DestinationTypeV2 enum
var AllowedDestinationTypeV2EnumValues = []DestinationTypeV2{
	"HOME_OF_RECORD",
	"HOME_OF_SELECTION",
	"PLACE_ENTERED_ACTIVE_DUTY",
	"OTHER_THAN_AUTHORIZED",
}

func (v *DestinationTypeV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DestinationTypeV2(value)
	for _, existing := range AllowedDestinationTypeV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DestinationTypeV2", value)
}

// NewDestinationTypeV2FromValue returns a pointer to a valid DestinationTypeV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDestinationTypeV2FromValue(v string) (*DestinationTypeV2, error) {
	ev := DestinationTypeV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DestinationTypeV2: valid values are %v", v, AllowedDestinationTypeV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DestinationTypeV2) IsValid() bool {
	for _, existing := range AllowedDestinationTypeV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DestinationType value
func (v DestinationTypeV2) Ptr() *DestinationTypeV2 {
	return &v
}

type NullableDestinationTypeV2 struct {
	value *DestinationTypeV2
	isSet bool
}

func (v NullableDestinationTypeV2) Get() *DestinationTypeV2 {
	return v.value
}

func (v *NullableDestinationTypeV2) Set(val *DestinationTypeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationTypeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationTypeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationTypeV2(val *DestinationTypeV2) *NullableDestinationTypeV2 {
	return &NullableDestinationTypeV2{value: val, isSet: true}
}

func (v NullableDestinationTypeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationTypeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

