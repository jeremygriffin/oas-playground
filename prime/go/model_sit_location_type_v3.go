/*
MilMove Prime V3 API

The Prime V3 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v3/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SITLocationTypeV3 The list of SIT location types.
type SITLocationTypeV3 string

// List of SITLocationType
const (
	ORIGIN SITLocationTypeV3 = "ORIGIN"
	DESTINATION SITLocationTypeV3 = "DESTINATION"
)

// All allowed values of SITLocationTypeV3 enum
var AllowedSITLocationTypeV3EnumValues = []SITLocationTypeV3{
	"ORIGIN",
	"DESTINATION",
}

func (v *SITLocationTypeV3) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SITLocationTypeV3(value)
	for _, existing := range AllowedSITLocationTypeV3EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SITLocationTypeV3", value)
}

// NewSITLocationTypeV3FromValue returns a pointer to a valid SITLocationTypeV3
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSITLocationTypeV3FromValue(v string) (*SITLocationTypeV3, error) {
	ev := SITLocationTypeV3(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SITLocationTypeV3: valid values are %v", v, AllowedSITLocationTypeV3EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SITLocationTypeV3) IsValid() bool {
	for _, existing := range AllowedSITLocationTypeV3EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SITLocationType value
func (v SITLocationTypeV3) Ptr() *SITLocationTypeV3 {
	return &v
}

type NullableSITLocationTypeV3 struct {
	value *SITLocationTypeV3
	isSet bool
}

func (v NullableSITLocationTypeV3) Get() *SITLocationTypeV3 {
	return v.value
}

func (v *NullableSITLocationTypeV3) Set(val *SITLocationTypeV3) {
	v.value = val
	v.isSet = true
}

func (v NullableSITLocationTypeV3) IsSet() bool {
	return v.isSet
}

func (v *NullableSITLocationTypeV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSITLocationTypeV3(val *SITLocationTypeV3) *NullableSITLocationTypeV3 {
	return &NullableSITLocationTypeV3{value: val, isSet: true}
}

func (v NullableSITLocationTypeV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSITLocationTypeV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

