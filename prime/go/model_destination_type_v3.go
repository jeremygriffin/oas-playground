/*
MilMove Prime V3 API

The Prime V3 API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v3/`. 

API version: 0.0.1
Contact: milmove-developers@caci.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DestinationTypeV3 the model 'DestinationTypeV3'
type DestinationTypeV3 string

// List of DestinationType
const (
	HOME_OF_RECORD DestinationTypeV3 = "HOME_OF_RECORD"
	HOME_OF_SELECTION DestinationTypeV3 = "HOME_OF_SELECTION"
	PLACE_ENTERED_ACTIVE_DUTY DestinationTypeV3 = "PLACE_ENTERED_ACTIVE_DUTY"
	OTHER_THAN_AUTHORIZED DestinationTypeV3 = "OTHER_THAN_AUTHORIZED"
)

// All allowed values of DestinationTypeV3 enum
var AllowedDestinationTypeV3EnumValues = []DestinationTypeV3{
	"HOME_OF_RECORD",
	"HOME_OF_SELECTION",
	"PLACE_ENTERED_ACTIVE_DUTY",
	"OTHER_THAN_AUTHORIZED",
}

func (v *DestinationTypeV3) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DestinationTypeV3(value)
	for _, existing := range AllowedDestinationTypeV3EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DestinationTypeV3", value)
}

// NewDestinationTypeV3FromValue returns a pointer to a valid DestinationTypeV3
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDestinationTypeV3FromValue(v string) (*DestinationTypeV3, error) {
	ev := DestinationTypeV3(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DestinationTypeV3: valid values are %v", v, AllowedDestinationTypeV3EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DestinationTypeV3) IsValid() bool {
	for _, existing := range AllowedDestinationTypeV3EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DestinationType value
func (v DestinationTypeV3) Ptr() *DestinationTypeV3 {
	return &v
}

type NullableDestinationTypeV3 struct {
	value *DestinationTypeV3
	isSet bool
}

func (v NullableDestinationTypeV3) Get() *DestinationTypeV3 {
	return v.value
}

func (v *NullableDestinationTypeV3) Set(val *DestinationTypeV3) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationTypeV3) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationTypeV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationTypeV3(val *DestinationTypeV3) *NullableDestinationTypeV3 {
	return &NullableDestinationTypeV3{value: val, isSet: true}
}

func (v NullableDestinationTypeV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationTypeV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

