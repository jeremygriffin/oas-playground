=begin
#MilMove Prime API

#The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`. 

The version of the OpenAPI document: 0.0.1
Contact: milmove-developers@caci.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class PaymentRequestApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # createPaymentRequest
    # Creates a new instance of a paymentRequest and is assigned the status `PENDING`. A move task order can have multiple payment requests, and a final payment request can be marked using boolean `isFinal`.  If a `PENDING` payment request is recalculated, a new payment request is created and the original request is marked with the status `DEPRECATED`.  **NOTE**: In order to create a payment request for most service items, the shipment *must* be updated with the `PrimeActualWeight` value via [updateMTOShipment](#operation/updateMTOShipment).  **FSC - Fuel Surcharge** service items require `ActualPickupDate` to be updated on the shipment.  A service item can be on several payment requests in the case of partial payment requests and payments.  In the request, if no params are necessary, then just the `serviceItem` `id` is required. For example: ```json {   \"isFinal\": false,   \"moveTaskOrderID\": \"uuid\",   \"serviceItems\": [     {       \"id\": \"uuid\",     },     {       \"id\": \"uuid\",       \"params\": [         {           \"key\": \"Service Item Parameter Name\",           \"value\": \"Service Item Parameter Value\"         }       ]     }   ],   \"pointOfContact\": \"string\" } ```  SIT Service Items & Accepted Payment Request Parameters: --- If `WeightBilled` is not provided then the full shipment weight (`PrimeActualWeight`) will be considered in the calculation.  **NOTE**: Diversions have a unique calcuation for payment requests without a `WeightBilled` parameter.  If you created a payment request for a diversion and `WeightBilled` is not provided, then the following will be used in the calculation: - The lowest shipment weight (`PrimeActualWeight`) found in the diverted shipment chain. - The lowest reweigh weight found in the diverted shipment chain.  The diverted shipment chain is created by referencing the `diversion` boolean, `divertedFromShipmentId` UUID, and matching destination to pickup addresses. If the chain cannot be established it will fall back to the `PrimeActualWeight` of the current shipment. This is utilized because diverted shipments are all one single shipment, but going to different locations. The lowest weight found is the true shipment weight, and thus we search the chain of shipments for the lowest weight found.  **DOFSIT - Domestic origin 1st day SIT** ```json   \"params\": [     {       \"key\": \"WeightBilled\",       \"value\": \"integer\"     }   ] ```  **DOASIT - Domestic origin add'l SIT** *(SITPaymentRequestStart & SITPaymentRequestEnd are **REQUIRED**)* *To create a paymentRequest for this service item, the `SITPaymentRequestStart` and `SITPaymentRequestEnd` dates must not overlap previously requested SIT dates.* ```json   \"params\": [     {       \"key\": \"WeightBilled\",       \"value\": \"integer\"     },     {       \"key\": \"SITPaymentRequestStart\",       \"value\": \"date\"     },     {       \"key\": \"SITPaymentRequestEnd\",       \"value\": \"date\"     }   ] ```  **DOPSIT - Domestic origin SIT pickup** ```json   \"params\": [     {       \"key\": \"WeightBilled\",       \"value\": \"integer\"     }   ] ```  **DOSHUT - Domestic origin shuttle service** ```json   \"params\": [     {       \"key\": \"WeightBilled\",       \"value\": \"integer\"     }   ] ```  **DDFSIT - Domestic destination 1st day SIT** ```json   \"params\": [     {       \"key\": \"WeightBilled\",       \"value\": \"integer\"     }   ] ```  **DDASIT - Domestic destination add'l SIT** *(SITPaymentRequestStart & SITPaymentRequestEnd are **REQUIRED**)* *To create a paymentRequest for this service item, the `SITPaymentRequestStart` and `SITPaymentRequestEnd` dates must not overlap previously requested SIT dates.* ```json   \"params\": [     {       \"key\": \"WeightBilled\",       \"value\": \"integer\"     },     {       \"key\": \"SITPaymentRequestStart\",       \"value\": \"date\"     },     {       \"key\": \"SITPaymentRequestEnd\",       \"value\": \"date\"     }   ] ```  **DDDSIT - Domestic destination SIT delivery** *To create a paymentRequest for this service item, it must first have a final address set via [updateMTOServiceItem](#operation/updateMTOServiceItem).* ```json   \"params\": [     {       \"key\": \"WeightBilled\",       \"value\": \"integer\"     }   ] ```  **DDSHUT - Domestic destination shuttle service** ```json   \"params\": [     {       \"key\": \"WeightBilled\",       \"value\": \"integer\"     }   ] ``` --- 
    # @param [Hash] opts the optional parameters
    # @option opts [CreatePaymentRequest] :body 
    # @return [PaymentRequest]
    def create_payment_request(opts = {})
      data, _status_code, _headers = create_payment_request_with_http_info(opts)
      data
    end

    # createPaymentRequest
    # Creates a new instance of a paymentRequest and is assigned the status &#x60;PENDING&#x60;. A move task order can have multiple payment requests, and a final payment request can be marked using boolean &#x60;isFinal&#x60;.  If a &#x60;PENDING&#x60; payment request is recalculated, a new payment request is created and the original request is marked with the status &#x60;DEPRECATED&#x60;.  **NOTE**: In order to create a payment request for most service items, the shipment *must* be updated with the &#x60;PrimeActualWeight&#x60; value via [updateMTOShipment](#operation/updateMTOShipment).  **FSC - Fuel Surcharge** service items require &#x60;ActualPickupDate&#x60; to be updated on the shipment.  A service item can be on several payment requests in the case of partial payment requests and payments.  In the request, if no params are necessary, then just the &#x60;serviceItem&#x60; &#x60;id&#x60; is required. For example: &#x60;&#x60;&#x60;json {   \&quot;isFinal\&quot;: false,   \&quot;moveTaskOrderID\&quot;: \&quot;uuid\&quot;,   \&quot;serviceItems\&quot;: [     {       \&quot;id\&quot;: \&quot;uuid\&quot;,     },     {       \&quot;id\&quot;: \&quot;uuid\&quot;,       \&quot;params\&quot;: [         {           \&quot;key\&quot;: \&quot;Service Item Parameter Name\&quot;,           \&quot;value\&quot;: \&quot;Service Item Parameter Value\&quot;         }       ]     }   ],   \&quot;pointOfContact\&quot;: \&quot;string\&quot; } &#x60;&#x60;&#x60;  SIT Service Items &amp; Accepted Payment Request Parameters: --- If &#x60;WeightBilled&#x60; is not provided then the full shipment weight (&#x60;PrimeActualWeight&#x60;) will be considered in the calculation.  **NOTE**: Diversions have a unique calcuation for payment requests without a &#x60;WeightBilled&#x60; parameter.  If you created a payment request for a diversion and &#x60;WeightBilled&#x60; is not provided, then the following will be used in the calculation: - The lowest shipment weight (&#x60;PrimeActualWeight&#x60;) found in the diverted shipment chain. - The lowest reweigh weight found in the diverted shipment chain.  The diverted shipment chain is created by referencing the &#x60;diversion&#x60; boolean, &#x60;divertedFromShipmentId&#x60; UUID, and matching destination to pickup addresses. If the chain cannot be established it will fall back to the &#x60;PrimeActualWeight&#x60; of the current shipment. This is utilized because diverted shipments are all one single shipment, but going to different locations. The lowest weight found is the true shipment weight, and thus we search the chain of shipments for the lowest weight found.  **DOFSIT - Domestic origin 1st day SIT** &#x60;&#x60;&#x60;json   \&quot;params\&quot;: [     {       \&quot;key\&quot;: \&quot;WeightBilled\&quot;,       \&quot;value\&quot;: \&quot;integer\&quot;     }   ] &#x60;&#x60;&#x60;  **DOASIT - Domestic origin add&#39;l SIT** *(SITPaymentRequestStart &amp; SITPaymentRequestEnd are **REQUIRED**)* *To create a paymentRequest for this service item, the &#x60;SITPaymentRequestStart&#x60; and &#x60;SITPaymentRequestEnd&#x60; dates must not overlap previously requested SIT dates.* &#x60;&#x60;&#x60;json   \&quot;params\&quot;: [     {       \&quot;key\&quot;: \&quot;WeightBilled\&quot;,       \&quot;value\&quot;: \&quot;integer\&quot;     },     {       \&quot;key\&quot;: \&quot;SITPaymentRequestStart\&quot;,       \&quot;value\&quot;: \&quot;date\&quot;     },     {       \&quot;key\&quot;: \&quot;SITPaymentRequestEnd\&quot;,       \&quot;value\&quot;: \&quot;date\&quot;     }   ] &#x60;&#x60;&#x60;  **DOPSIT - Domestic origin SIT pickup** &#x60;&#x60;&#x60;json   \&quot;params\&quot;: [     {       \&quot;key\&quot;: \&quot;WeightBilled\&quot;,       \&quot;value\&quot;: \&quot;integer\&quot;     }   ] &#x60;&#x60;&#x60;  **DOSHUT - Domestic origin shuttle service** &#x60;&#x60;&#x60;json   \&quot;params\&quot;: [     {       \&quot;key\&quot;: \&quot;WeightBilled\&quot;,       \&quot;value\&quot;: \&quot;integer\&quot;     }   ] &#x60;&#x60;&#x60;  **DDFSIT - Domestic destination 1st day SIT** &#x60;&#x60;&#x60;json   \&quot;params\&quot;: [     {       \&quot;key\&quot;: \&quot;WeightBilled\&quot;,       \&quot;value\&quot;: \&quot;integer\&quot;     }   ] &#x60;&#x60;&#x60;  **DDASIT - Domestic destination add&#39;l SIT** *(SITPaymentRequestStart &amp; SITPaymentRequestEnd are **REQUIRED**)* *To create a paymentRequest for this service item, the &#x60;SITPaymentRequestStart&#x60; and &#x60;SITPaymentRequestEnd&#x60; dates must not overlap previously requested SIT dates.* &#x60;&#x60;&#x60;json   \&quot;params\&quot;: [     {       \&quot;key\&quot;: \&quot;WeightBilled\&quot;,       \&quot;value\&quot;: \&quot;integer\&quot;     },     {       \&quot;key\&quot;: \&quot;SITPaymentRequestStart\&quot;,       \&quot;value\&quot;: \&quot;date\&quot;     },     {       \&quot;key\&quot;: \&quot;SITPaymentRequestEnd\&quot;,       \&quot;value\&quot;: \&quot;date\&quot;     }   ] &#x60;&#x60;&#x60;  **DDDSIT - Domestic destination SIT delivery** *To create a paymentRequest for this service item, it must first have a final address set via [updateMTOServiceItem](#operation/updateMTOServiceItem).* &#x60;&#x60;&#x60;json   \&quot;params\&quot;: [     {       \&quot;key\&quot;: \&quot;WeightBilled\&quot;,       \&quot;value\&quot;: \&quot;integer\&quot;     }   ] &#x60;&#x60;&#x60;  **DDSHUT - Domestic destination shuttle service** &#x60;&#x60;&#x60;json   \&quot;params\&quot;: [     {       \&quot;key\&quot;: \&quot;WeightBilled\&quot;,       \&quot;value\&quot;: \&quot;integer\&quot;     }   ] &#x60;&#x60;&#x60; --- 
    # @param [Hash] opts the optional parameters
    # @option opts [CreatePaymentRequest] :body 
    # @return [Array<(PaymentRequest, Integer, Hash)>] PaymentRequest data, response status code and response headers
    def create_payment_request_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentRequestApi.create_payment_request ...'
      end
      # resource path
      local_var_path = '/payment-requests'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentRequestApi.create_payment_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentRequestApi#create_payment_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # createUpload
    # ### Functionality This endpoint **uploads** a Proof of Service document for a PaymentRequest.  The PaymentRequest should already exist.  Optional key of **isWeightTicket** indicates if the document is a weight ticket or not. This will be used for partial and full deliveries and makes it easier for the Task Invoicing Officers to locate and review service item documents. If left empty, it will assume it is NOT a weight ticket.  The formdata in the body of the POST request that is sent should look like this if it IS a weight ticket being attached to an existing payment request:   ```json   {     \"file\": \"filePath\",     \"isWeightTicket\": true   }   ```   If the proof of service doc is NOT a weight ticket, it will look like this - or you can leave it empty:   ```json   {     \"file\": \"filePath\",     \"isWeightTicket\": false   }   ```   ```json   {     \"file\": \"filePath\",   }   ```  PaymentRequests are created with the [createPaymentRequest](#operation/createPaymentRequest) endpoint. 
    # @param payment_request_id [String] UUID of payment request to use.
    # @param file [File] The file to upload.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :is_weight_ticket Indicates whether the file is a weight ticket.
    # @return [UploadWithOmissions]
    def create_upload(payment_request_id, file, opts = {})
      data, _status_code, _headers = create_upload_with_http_info(payment_request_id, file, opts)
      data
    end

    # createUpload
    # ### Functionality This endpoint **uploads** a Proof of Service document for a PaymentRequest.  The PaymentRequest should already exist.  Optional key of **isWeightTicket** indicates if the document is a weight ticket or not. This will be used for partial and full deliveries and makes it easier for the Task Invoicing Officers to locate and review service item documents. If left empty, it will assume it is NOT a weight ticket.  The formdata in the body of the POST request that is sent should look like this if it IS a weight ticket being attached to an existing payment request:   &#x60;&#x60;&#x60;json   {     \&quot;file\&quot;: \&quot;filePath\&quot;,     \&quot;isWeightTicket\&quot;: true   }   &#x60;&#x60;&#x60;   If the proof of service doc is NOT a weight ticket, it will look like this - or you can leave it empty:   &#x60;&#x60;&#x60;json   {     \&quot;file\&quot;: \&quot;filePath\&quot;,     \&quot;isWeightTicket\&quot;: false   }   &#x60;&#x60;&#x60;   &#x60;&#x60;&#x60;json   {     \&quot;file\&quot;: \&quot;filePath\&quot;,   }   &#x60;&#x60;&#x60;  PaymentRequests are created with the [createPaymentRequest](#operation/createPaymentRequest) endpoint. 
    # @param payment_request_id [String] UUID of payment request to use.
    # @param file [File] The file to upload.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :is_weight_ticket Indicates whether the file is a weight ticket.
    # @return [Array<(UploadWithOmissions, Integer, Hash)>] UploadWithOmissions data, response status code and response headers
    def create_upload_with_http_info(payment_request_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentRequestApi.create_upload ...'
      end
      # verify the required parameter 'payment_request_id' is set
      if @api_client.config.client_side_validation && payment_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_request_id' when calling PaymentRequestApi.create_upload"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling PaymentRequestApi.create_upload"
      end
      # resource path
      local_var_path = '/payment-requests/{paymentRequestID}/uploads'.sub('{' + 'paymentRequestID' + '}', CGI.escape(payment_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['isWeightTicket'] = opts[:'is_weight_ticket'] if !opts[:'is_weight_ticket'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UploadWithOmissions'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentRequestApi.create_upload",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentRequestApi#create_upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
